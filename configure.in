dnl
dnl Configure script for the Gnome library
dnl

AC_INIT(gnome.h)
AM_CONFIG_HEADER(config.h)

AC_CANONICAL_SYSTEM

AM_INIT_AUTOMAKE(gnome-libs, 0.20)

AM_ACLOCAL_INCLUDE(macros)

AC_ISC_POSIX
AC_PROG_CC
AC_STDC_HEADERS
AC_ARG_PROGRAM

AM_PROG_LIBTOOL

AM_MAINTAINER_MODE

dnl
dnl let applications configure for gnome
dnl
gnome_cv_use_gnome=yes

GNOME_X_CHECKS
if test "$USE_DEVGTK" = true; then
   GNOME_CANVAS_SRC="gnome-canvas.c gnome-canvas-image.c gnome-canvas-rect-ellipse.c gnome-canvas-text.c"
   GNOME_CANVAS_HED="gnome-canvas.h gnome-canvas-image.h gnome-canvas-rect-ellipse.h gnome-canvas-text.h"
   GNOME_CANVAS_OBJS="gnome-canvas.lo gnome-canvas-image.lo gnome-canvas-rect-ellipse.lo gnome-canvas-text.lo"
fi
AC_SUBST(GNOME_CANVAS_SRC)
AC_SUBST(GNOME_CANVAS_HED)
AC_SUBST(GNOME_CANVAS_OBJS)

GNOME_SUPPORT_CHECKS

AM_PATH_GLIB(,,[
  GLIB_LIBS=
  AC_MSG_WARN(GLIB not installed, or glib-config not in path)])

dnl Utility conditional
AM_CONDITIONAL(FALSE, test x = y)

AC_ARG_ENABLE(debug, [  --enable-debug turn on debugging [default=no]],AC_DEFINE(GNOME_ENABLE_DEBUG),)

AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

ALL_LINGUAS="de fr it ko cs es no fi ga pt"

AM_GNU_GETTEXT
AC_LINK_FILES($nls_cv_header_libgt, $nls_cv_header_intl)

AC_CHECK_LIB(m, main)

AC_CHECK_HEADERS(dlfcn.h dl.h)

DL_LIB=
AC_CHECK_FUNCS(dlopen,,[
AC_CHECK_LIB(dl, dlopen, DL_LIB="-ldl",[
AC_CHECK_LIB(dld, shl_load, DL_LIB="-ldld",[
AC_CHECK_FUNCS(dlopen, DL_LIB="",
AC_MSG_ERROR(Dynamic linking is not available on this platform.  Some apps,
like panel, will not run properly.))
])])])
oLIBS="$LIBS"
LIBS="$LIBS $DL_LIB"
AC_CHECK_FUNCS(dlerror,,)
LIBS="$oLIBS"
AC_SUBST(DL_LIB)

AC_CHECK_FUNCS(strerror gethostbyname setfsgid setenv putenv)
NSL_LIBS=""
if test $ac_cv_func_gethostbyname = no; then
  AC_CHECK_LIB(nsl,gethostbyname,NSL_LIBS=-lnsl)
fi
AC_SUBST(NSL_LIBS)

dnl libgtkxmhtml enables a workaround if this isn't present
xLIBS="$LIBS"
LIBS="$LIBS $GTK_LIBS $X_LIBS $x_libs"
AC_CHECK_FUNCS(gtk_signal_handler_pending)
LIBS="$xLIBS"

dnl zvt checks
AC_CHECK_HEADERS(sys/select.h)

dnl Image handling libraries
Z_LIBS= JPEG_LIBS= PNG_LIBS= TIFF_LIBS= GIF_LIBS= GDK_IMLIB_LIBS=

dnl Test for libz
AC_CHECK_LIB(z, inflate,
  AC_CHECK_HEADER(zlib.h,
    Z_LIBS="-lz";  AC_DEFINE(HAVE_LIBZ)))

dnl Test for libjpeg
AC_CHECK_LIB(jpeg, jpeg_destroy_decompress,
  jpeg_ok=yes,
  jpeg_ok=no)
if test "$jpeg_ok" = yes; then
  AC_MSG_CHECKING([for jpeg.h])
  AC_TRY_CPP(
[#include <stdio.h>
#undef PACKAGE
#undef VERSION
#include <jpeglib.h>],
    jpeg_ok=yes,
    jpeg_ok=no)
  AC_MSG_RESULT($jpeg_ok)
  if test "$jpeg_ok" = yes; then
    JPEG_LIBS="-ljpeg"; AC_DEFINE(HAVE_LIBJPEG)
  fi
fi

dnl Test for libtiff
AC_CHECK_LIB(tiff, TIFFReadScanline,
  AC_CHECK_HEADER(tiffio.h,
    TIFF_LIBS="-ltiff"; AC_DEFINE(HAVE_LIBTIFF)),
  AC_CHECK_LIB(tiff, TIFFWriteScanline,
    AC_CHECK_HEADER(tiffio.h,
      TIFF_LIBS="-ltiff $JPEG_LIBS $Z_LIBS"; AC_DEFINE(HAVE_LIBTIFF)),
    AC_CHECK_LIB(tiff34, TIFFFlushData,
      AC_CHECK_HEADER(tiffio.h,
        TIFF_LIBS="-ltiff34 $JPEG_LIBS $Z_LIBS"; AC_DEFINE(HAVE_LIBTIFF)),,
$JPEG_LIBS $Z_LIBS -lm), $JPEG_LIBS $Z_LIBS -lm), -lm)

dnl Test for libgif
AC_CHECK_LIB(gif, DGifOpenFileName,
  AC_CHECK_HEADER(gif_lib.h,
    GIF_LIBS="-lgif"; AC_DEFINE(HAVE_LIBGIF)),,$GTK_LIBS)

dnl Test for libpng
AC_CHECK_LIB(png, png_read_info,
  AC_CHECK_HEADER(png.h,
    png_ok=yes,
    png_ok=no),,$Z_LIBS -lm)
if test "$png_ok" = yes; then
  AC_MSG_CHECKING([for png_structp in png.h])
  AC_TRY_COMPILE([#include <png.h>],
    [png_structp pp; png_infop info; png_colorp cmap; png_create_read_struct
;],
    png_ok=yes,
    png_ok=no)
  AC_MSG_RESULT($png_ok)
  if test "$png_ok" = yes; then
    PNG_LIBS="-lpng $Z_LIBS"; AC_DEFINE(HAVE_LIBPNG)
  fi
fi

AC_CHECK_LIB(gdk_imlib, gdk_imlib_init, [
 GDK_IMLIB_LIBS="-lgdk_imlib $TIFF_LIBS $GIF_LIBS $JPEG_LIBS $PNG_LIBS $Z_LIBS"
],[
AC_MSG_ERROR(I could not find gdk_imlib, which is required by Gnome libs)
],$TIFF_LIBS $GIF_LIBS $JPEG_LIBS $PNG_LIBS $Z_LIBS $GTK_LIBS $X_LIBS $x_libs)

dnl These are for building the apporpriate lib*
LIBGNOME_LIBS="$GLIB_LIBS $DL_LIB"
LIBGNOMEUI_LIBS="$LIBGNOME_LIBS $GDK_IMLIB_LIBS $GTK_LIBS"
LIBGTKXMHTML_LIBS="$XPM_LIBS $JPEG_LIBS $PNG_LIBS $Z_LIBS $GTK_LIBS"
LIBSUPPORT=
SUPPORTINCS=
if test "$need_gnome_support" = yes; then
   LIBSUPPORT='$(top_builddir)/support/libgnomesupport.la'
   SUPPORTINCS='-DNEED_GNOMESUPPORT_H -I$(top_builddir)/support -I$(top_srcdir)/support'
fi

dnl These are for using lib*
if test "$need_gnome_support" = yes; then
   GNOME_LIBS="-lgnome -lgnomesupport $LIBGNOME_LIBS"
else
   GNOME_LIBS="-lgnome $LIBGNOME_LIBS"
fi
GNOMEUI_LIBS="-lgnomeui $GDK_IMLIB_LIBS $GTK_LIBS $GNOME_LIBS"
GTKXMHTML_LIBS="-lgtkxmhtml $LIBGTKXMHTML_LIBS"
ZVT_LIBS="-lzvt $GTK_LIBS"

AC_SUBST(GLIB_LIBS)
GLIB_LIBS=`echo $GTK_LIBS | sed -e 's/.*-lglib/-lglib/' -e 's/ .*//'`

dnl These definitions are expanded in make and gnome-config
GNOME_LIBDIR='-L${libdir}'
GNOME_INCLUDEDIR='-I${includedir}'
if test "$need_gnome_support" = yes; then
   GNOME_INCLUDEDIR="$GNOME_INCLUDEDIR -DNEED_GNOMESUPPORT_H -I\${pkglibdir}/include"
fi
AC_SUBST(GTK_LIBS)
AC_SUBST(GNOME_LIBS)
AC_SUBST(GNOMEUI_LIBS)
AC_SUBST(ZVT_LIBS)
AC_SUBST(GTKXMHTML_LIBS)
AC_SUBST(GNOME_LIBDIR)
AC_SUBST(GNOME_INCLUDEDIR)

AC_SUBST(LIBSUPPORT)
AC_SUBST(SUPPORTINCS)

AC_SUBST(LIBGNOME_LIBS)
AC_SUBST(LIBGNOMEUI_LIBS)
AC_SUBST(LIBGTKXMHTML_LIBS)

AC_CONFIG_SUBDIRS(libgtktty)

AC_OUTPUT([
Makefile
po/Makefile.in
intl/Makefile
gnome-config
gtk-xmhtml/Makefile
libgnome/Makefile
libgnomeui/Makefile
libgnomeui/pixmaps/Makefile
zvt/Makefile
test-suite/Makefile
gnome-hello/Makefile
test-gnome/Makefile
devel-docs/Makefile
support/Makefile
macros/Makefile],[sed -e "/POTFILES =/r po/POTFILES" po/Makefile.in > po/Makefile])
