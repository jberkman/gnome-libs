#!/bin/sh

prefix=@prefix@
exec_prefix=@exec_prefix@

bindir=@bindir@
sbindir=@sbindir@
libexecdir=@libexecdir@
datadir=@datadir@
sysconfdir=@sysconfdir@
sharedstatedir=@sharedstatedir@
localstatedir=@localstatedir@
libdir=@libdir@
infodir=@infodir@
mandir=@mandir@
includedir=@includedir@

pkgdatadir=${datadir}/@PACKAGE@
pkglibdir=${libdir}/@PACKAGE@
pkgincludedir=${includedir}/@PACKAGE@
MODULE_VERSION=@PACKAGE@-@VERSION@

interface_version_installed() {
    error=true
    [ -n "$1" ] || exit 1
    if [ "$1" = "1" ]; then
	tmp_module_dirs="${libdir}"
	for extra in `echo $GNOME_PATH  | sed 's/:/ /g'`; do
	    tmp_module_dirs="$extra/lib:$module_dirs"
	done
	for extra in `echo $GNOME_LIBCONFIG_PATH  | sed 's/:/ /g'`; do
	    tmp_module_dirs="$extra:$module_dirs"
	done
	if [ -z "${GNOME_PATH}${GNOME_LIBCONFIG_PATH}" ]; then
	    tmp_module_dirs="${libdir}"
	fi
    else
	tmp_module_dirs="${datadir}/gnome/conf/$1"
	for extra in `echo $GNOME_PATH  | sed 's/:/ /g'`; do
	    tmp_module_dirs="${extra}/share/gnome/conf/$1:$module_dirs"
	done
    fi
    for dir in `echo $tmp_module_dirs | sed 's/:/ /g'`; do
	if [ -d "${dir}" ]; then
	    error=false
	    break
	fi
    done
    [ "$error" != "true" ]
    return
}

source_conf_file() {
    error=true
    for dir in `echo $module_dirs | sed 's/:/ /g'`; do
	cnf_sh=${dir}/${1}Conf.sh
	if test -f ${cnf_sh}; then
	    . ${cnf_sh}
	    error=false
	    break
	fi
    done
    if [ "$error" = "true" ]; then
	echo "Library \`$1' is not installed for interface version $INTERFACE_VERSION" 1>&2
	exit 1
    fi
    return 0
}
snarf_module_info() {
    if [ -z "$1" ]; then
	echo "We are snarfing empty module!"
	exit 1
    fi
    source_conf_file $1
    up_name=`echo $1 | tr a-z A-Z`
    cnf_libdir=\$${up_name}_LIBDIR
    cnf_libs=\$${up_name}_LIBS
    cnf_flags=\$${up_name}_INCLUDEDIR
    the_libs="$the_libs `eval echo $cnf_libdir` `eval echo $cnf_libs`"
    the_flags="$the_flags `eval echo $cnf_flags`"
}

# stolen from autoconf
if (echo "testing\c"; echo 1,2,3) | grep c >/dev/null; then
  if (echo -n testing; echo 1,2,3) | sed s/-n/xn/ | grep xn >/dev/null; then
    ac_n= ac_c='
' ac_t='	'
  else
    ac_n=-n ac_c= ac_t=
  fi
else
  ac_n= ac_c='\c' ac_t=
fi

usage()
{
    exit_code=$1

    cat <<EOF
Usage: gnome-config [OPTION]... [LIBRARY]...

Generic options
  --version	                                 Output gnome version information.
  --modversion                                   Output the module version information.
  --help	                                 Display this help and exit.
  --compat=X...                                  Be source-compatible with the given versions "X..."
  --interface-version=X                          The desired interface version of the library is "X"
  --chosen-interface-version                     Output the chosen interface version (either from defaults or cmdline info)

Compilation support options
  --cflags	print pre-processor and compiler flags
  --libs	print library linking information
  --libs-only-L	only print the -L/-R part of --libs
  --libs-only-l only print the -l part of --libs

Install directories gnome-libs was configured to
  --prefix  --exec-prefix  --bindir  --sbindir  --libexecdir  --datadir
  --sysconfdir  --sharedstatedir  --localstatedir  --libdir  --infodir
  --mandir  --includedir

Known values for LIBRARY are:

    glib	(calls glib-config)
    idl         (to be used with orbit-idl)
    gnome
    gnomeui
    gtk		(calls gtk-config)
    zvt		(only --libs)
GNOME 1 only:
    gnorba
    gtkxmhtml	(only --libs)

If LIBRARY is none of these,

    ${datadir}/gnome/conf/<INTERFACE_VERSION>/<LIBRARY>Conf.sh

is looked at for the necessary information (${libdir} for interface
version 1).  Those currently installed appear to be:

EOF
    for dir in `echo $module_dirs | sed 's/:/ /g'`; do
	conf_shs=`cd $dir; echo *Conf.sh`
	if test "x$conf_shs" = x || test "x$conf_shs" = 'x*Conf.sh'; then :
	else
	    set gnomeConf.sh $conf_shs

	    for i in $conf_shs;
	    do
		case "$i" in
		gnomeConf.sh) ;;
		*Conf.sh) echo $ac_n "$i $ac_c";;
		*) echo "*** ERROR: What is this? $i" 1>&2; exit 2 ;;
		esac
	    done
	fi
    done | sed -e 's/Conf\.sh /, /g' -e 's/, $//' | fmt

    exit $exit_code
}

if test $# -eq 0; then
    usage 1
fi

cflags=false
libs_L=false
libs_l=false
modversion=false
get_gnome=false
get_gnomeui=false
get_gtkxmhtml=false
get_zvt=false
get_gnorba=false
get_modules=""
show_chosen_iver=no

while test $# -gt 0; do
    case "$1" in
    -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
    *) optarg= ;;
    esac

    case $1 in
    --version)
	echo @PACKAGE@ @VERSION@
	exit 0
	;;
    --exec-prefix)
	echo $exec_prefix
	exit 0
	;;
    --prefix)
	echo $prefix
	exit 0
	;;
    --*dir)
	dirname=\$`echo $1 | sed -e 's,^--,,'`
	dirname=`eval echo $dirname`
	test -z "$dirname" && exit 1
	echo $dirname
	exit 0
	;;
    --help)
	do_help=yes
	;;
    --cflags)
       	cflags=true
       	;;
    --libs)
       	libs_L=true
	libs_l=true
       	;;
    --libs-only-L)
	libs_L=true
	;;
    --libs-only-l)
	libs_l=true
	;;
    --modversion)
        modversion=true
	;;
    --interface-version*)
	[ -z "$optarg" ] && usage 1
	if interface_version_installed "$optarg"; then
	    true
	else
	    echo "The specified interface version, $optarg, is not available."
	    exit 1
	fi
	GNOME_INTERFACE_VERSION="$optarg"
	;;
    --chosen-interface-version)
	show_chosen_iver=yes
	;;
    --*)
	usage 1
	;;
    glib)
	the_libs="$the_libs `glib-config --libs`"
	the_flags="$the_flags `glib-config --cflags`"
	;;
    gtk)
	the_libs="$the_libs `gtk-config --libs`"
	the_flags="$the_flags `gtk-config --cflags`"
	;;
    gnome)
	need_gnome_conf=true
	get_gnome=true
	;;
    gnomeui)
	need_gnome_conf=true
	get_gnomeui=true
	;;
    gtkxmhtml)
	need_gnome_conf=true
	get_gtkxmhtml=true
	;;
    gnorba)
	need_gnome_conf=true
	get_gnorba=true
	;;
    idl)
	for extra in `echo $GNOME_PATH | sed 's/:/ /g'`; do
	    extra_idl_flags="$extra_idl_flags -I${extra}/share/idl"
	done
	the_flags="$the_flags -I${datadir}/idl $extra_idl_flags"
	idl_def=yes
	;;
    oaf)
	the_libs="$the_libs `oaf-config --libs`"
	the_flags="$the_flags `oaf-config --cflags`"
	;;
    zvt)
	need_gnome_conf=true
	get_zvt=true
	;;
    *)
	get_modules="$get_modules $1"
	;;
    esac
    shift
done

MY_INTERFACE_VERSION="@GNOME_INTERFACE_VERSION@"
INTERFACE_VERSION="$MY_INTERFACE_VERSION"
if [ -f "$sysconfdir/gnome/conf/interface_version.default" ]; then
    INTERFACE_VERSION="`cat $sysconfdir/gnome/conf/interface_version.default`"
fi
if [ -n "$GNOME_INTERFACE_VERSION" ]; then
    INTERFACE_VERSION="$GNOME_INTERFACE_VERSION"
fi
if [ "$INTERFACE_VERSION" != "1" ]; then
    module_dirs="${datadir}/gnome/conf/${INTERFACE_VERSION}"
    for extra in `echo $GNOME_PATH  | sed 's/:/ /g'`; do
	module_dirs="${extra}/share/gnome/conf/${INTERFACE_VERSION}:$module_dirs"
    done
else
    module_dirs="${libdir}"
    for extra in `echo $GNOME_PATH  | sed 's/:/ /g'`; do
	module_dirs="$extra/lib:$module_dirs"
    done
    for extra in `echo $GNOME_LIBCONFIG_PATH  | sed 's/:/ /g'`; do
	module_dirs="$extra:$module_dirs"
    done
fi

if [ -n "$do_help" ]; then
    usage 0
fi

if [ "$show_chosen_iver" = "yes" ]; then
    echo "$INTERFACE_VERSION"
    exit 0
fi

if [ "$get_gtkxmhtml" != "false" -a "$INTERFACE_VERSION" != "1" ]; then
    echo "gtkxmhtml only comes with GNOME 1, not $INTERFACE_VERSION"
    error=true
fi
if [ "$get_gnorba" != "false" -a "$INTERFACE_VERSION" != "1" ]; then
    echo "libgnorba only comes with GNOME 1, not $INTERFACE_VERSION"
    error=true
fi
if [ "$error" = "true" ]; then
    exit 1
fi

# Now, figure out the actual flags for things that we have to special-case
if [ "$need_gnome_conf" = "true" ]; then
    source_conf_file gnome
fi
if [ "$get_gnome" != "false" ]; then
    flags_need_def=
    the_flags="$the_flags $GNOME_INCLUDEDIR"
    the_libs="$the_libs $GNOME_LIBDIR $GNOME_LIBS"
fi
if [ "$get_gnomeui" != "false" ]; then
    the_flags="$the_flags $GNOME_INCLUDEDIR"
    the_libs="$the_libs $GNOME_LIBDIR $GNOMEUI_LIBS"
fi
if [ "$get_gtkxmhtml" != "false" ]; then
    the_flags="$the_flags $GNOME_INCLUDEDIR"
    the_libs="$the_libs $GNOME_LIBDIR -lgtkxmhtml $GNOMEUI_LIBS"
fi
if [ "$get_gnorba" != "false" ]; then
    the_flags="$the_flags $GNOME_INCLUDEDIR `orbit-config --cflags`"
    the_libs="$the_libs $GNOME_LIBDIR -lgnorba $GNOMEUI_LIBS `orbit-config --libs`"
fi
if [ "$get_zvt" != "false" ]; then
    the_flags="$the_flags $GNOME_INCLUDEDIR"
    [ -z "$ZVT_LIBS" ] && ZVT_LIBS="-lzvt `gtk-config --libs`"
    the_libs="$the_libs $GNOME_LIBDIR $ZVT_LIBS"
fi

# And now, for the rest of the story
for I in $get_modules; do
    snarf_module_info $I
done

if $cflags; then
    if [ -n "$idl_def" ]; then
	the_flags="$the_flags --define GNOME_INTERFACE_VERSION=$INTERFACE_VERSION"
    else
	the_flags="$the_flags -DGNOME_INTERFACE_VERSION=$INTERFACE_VERSION"
    fi
    all_flags="$the_flags"
fi

if $libs_L || $libs_l; then
    all_flags="$all_flags $the_libs"
fi

if $modversion; then
    echo $MODULE_VERSION
    exit 0
fi

if test -z "$all_flags" || test "x$all_flags" = "x "; then
    exit 1
fi

# Sort out any possible duplicates, but be careful to
# get `-lfoo -lbar -lbaz' for `-lfoo -lbaz -lbar -lbaz'
other_flags=
lib_L_flags=
rev_libs=
for i in $all_flags; do
    case "$i" in
    # a library, save it for later, in reverse order
    -l*) rev_libs="$i $rev_libs" ;;
    -L*|-R*)
	if $libs_L; then
	    case " $lib_L_flags " in
	    *\ $i\ *) ;;			# already there
	    *) lib_L_flags="$lib_L_flags $i" ;;	# add it to output
	    esac 
	fi;;
    *)
	case " $other_flags " in
	*\ $i\ *) ;;				# already there
	*) other_flags="$other_flags $i" ;;	# add it to output
        esac ;;
    esac
done

ord_libs=
if $libs_l; then
    for i in $rev_libs; do
	case " $ord_libs " in
	*\ $i\ *) ;;			# already there
	*) ord_libs="$i $ord_libs" ;;	# add it to output in reverse order
	esac
    done
fi

echo $other_flags $lib_L_flags $ord_libs

exit 0
