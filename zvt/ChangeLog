1998-04-30  Miguel de Icaza  <miguel@nuclecu.unam.mx>

	* zvtterm.h: Use unsigned ints for the flags.

	* zvtterm.c (vt_cursor_state): Test for drawability.

1998-04-30  Michael Zucchi  <zucchi@zzedzone.box.net.au>

	* zvtterm.c (zvt_term_realize): Put GDK_POINTER_MOTION_MASK back
	in, because we *ARE* interested in the events even when the button
	isn't pressed.  Otherwise the mouse doesn't un-blank :)

1998-04-29  Miguel de Icaza  <miguel@nuclecu.unam.mx>

	* zvtterm.c (zvt_term_realize): Removed the
	GDK_POINTER_MOTION_HINT_MASK, as this was preventing the motion
	from being reported back to the application;  Removed the
	GDK_POINTER_MOTION_MASK, as we are only interested in the events
	when the button is held pressed.
	
	(zvt_term_button_press): If shift key is pressed, then do not try
	to report the button operations to the application (standars
	behaviour :-)

	(zvt_term_readdata): signal_emission might have killed this
	process, do not call zvt_term_fix_scrollbar (ie, do a return on
	the if-part for the dead process).

1998-04-28  Miguel de Icaza  <miguel@nuclecu.unam.mx>

	* vt.c (vt_newline): Initialize the whole array, as it can be
	accessed past the screen size when the whole line is selected. 

	* zvtterm.c (zvt_term_readdata): Always show the cursor if
	blinking has been disabled.
	
1998-04-30  Michael Zucchi  <zucchi@zzedzone.box.net.au>

	* zvtterm.c (vt_draw_text): Bold now renders 'bright' colours.
	This is really only necessary (?) to emulate the use of the linux
	console colours.
	(vt_scroll_area): Does not clear the scrolled area exited space
	anymore.  Doesn't seem to be needed and cleans up scrolling.

	* vt.c (vt_swap_buffers): New function.  Not used yet.  Working on
	some very experimental update optimisation code.  Maybe it will
	speed things up a little <maybe>.

	* update.c (vt_update_rect): Added range check for cex/csx.  Could
	be 1 character too large from expose event.

	* zvtterm.c (zvt_term_readdata): *ALWAYS* turn the cursor back on
	after an update.  This must have got lost somewhere and was the
	cause of the "blinking cursor usually off" bug that's been giving
	me the shits :)  Ahhhh, thats much better.
	(vt_draw_text): Removed the need for the "VTATTR_FORE/BACK_SET"
	flag.  All it needed was a changed VTATTR_CLEAR define :)
	Check it works properly though Miguel?

	* vt.c: Removed some unecessary prototypes/comments.
		Oh dear, its tommorow already :(

1998-04-29  Michael Zucchi  <zucchi@zzedzone.box.net.au>

	* vt.c (vt_scrollback_set): Changed back to the way it was and
	also fixed the boundary condition.  It is safe to call vt_mem_push
	with a null location.

1998-04-28  Miguel de Icaza  <miguel@nuclecu.unam.mx>

	* vt.c (vt_scrollback_set): ln might be null after calling
	vt_list_remhead, only execute vt_mem_push if ln is not null.
	Michael, I do not know if this is the correct fix, could you check this?

	* zvtterm.c (zvt_term_forkpty): set term->input_id to the file
	descriptor of the chid.

1998-04-28  Michael Zucchi  <zucchi@zzedzone.box.net.au>

	* zterm.c (child_died_event): New function, exits.  This is the
	signal handler for the "child_died" event.

	* zvtterm.c (zvt_term_destroy): Added call to zvt_term_closepty
	and vtx_destroy, to clean up emulator resources.  Not sure if its
	working right though.
	(zvt_term_init): Removed some redundant code.
	(zvt_term_child_died): Default signal handler for child death.
	Does nothing.
	(zvt_term_readdata): Emits "child_died" signal when read fails.
	(zvt_term_class_init): Added "child_died" signal creation to
	class.

	* vt.c (vt_init): Sets the line number on initialisation of
	lines.  Maybe cleaner rendering on startup?

	* zvtterm.c (zvt_term_destroy): Added call to vtx_destory.

	* vt.c (vt_destory): New function.  Cleans up memory associated
	with vt run-time.  Scrollback and lines.  Closes child file
	descriptor.

	* update.c (vtx_destroy): New function.  Cleans up the vtx
	structure and free's it.

	* zvtterm.c (zvt_term_killchild): New function.  Calls
	vt_killchild().
	(zvt_term_forkpty): Checks validity of arguments.  Also doesn't
	allow a 'forked terminal' to fork again.
	(zvt_term_closepty): New function.  Close the child's process
	master terminal, and removes the gdk input handler.  Logical
	inverse of zvt_term_forkpty()

	* vt.h (vt_closepty): Added api functions killchild/closepty.
	Perhaps it should also SIGHUP the child?

	* vt.c (vt_killchild): New function.  Sorry about the name.
	Equivalent of 'kill(2)'.
	(vt_closepty): Inverse of forkpty().  Just closes the master pty.

	* zvtterm.h: Added fore_last and back_last to keep track of the
	last foreground/background colour used in the fore/back_gc's.

	* update.c (vt_update): Added initialisation of fn and firstline
	so that gcc won't complain about logic it couldn't follow.

	* zvtterm.c (vt_scroll_area): Clears the scrolled area using the
	term->back_gc, which cleans up scrolling.
	(vt_term_realize): Initialises fore_last/back_last.
	(vt_draw_text): Removed static variables last_fore, last_back to
	term->fore_last, term->back_last.

1998-04-27  Miguel de Icaza  <miguel@nuclecu.unam.mx>

	* vt.h (VTATTR_BACK_SET): Added two new attribute flags to
	indicate if explicit foreground or background have been set. 

	* zvtterm.c (zvt_term_class_init): New overwritten method:
	unrealize
	(zvt_term_unrealize): Relese resources allocated on the realize
	method. 
	(zvt_term_realize): Allocate a color context for the foreground
	and one for the backgroudn;  Allocate colors with the gdk color
	context code.  
	(vt_draw_text): Add color support. 

	* vt.c (vt_mode): fix, process any number of arguments to the mode
	escape sequence.

	* zvtterm.c (zvt_term_key_press): Backspace sends ^H; Delete sends
	\177, and KP_Delete sends \033[3~.

1998-04-27  Michael Zucchi  <zucchi@zzedzone.box.net.au>

	* zvtterm.c (vt_scroll_area): Generates and processes graphics_expose
		events when scrolling from off-window areas.

	* update.c (vt_update_rect): Modified to keep old state of cursor
		on exit.
		(vt_update): Modified to keep old state of cursor on exit.

	* zvtterm.c (vt_cursor_state): Modified to return the previous
		state of the cursor.

1998-04-26  Michael Zucchi  <zucchi@zzedzone.box.net.au>

	* memory.c: renamed mem_* functions to vt_mem_* functions.

	* update.c (vt_get_selection): Added a sanity check to
		ensure the selection lines exist.

	* zterm.c (main): Added scrollbar.
		Added -s <number> scrollback size option.
		Added call to zvt_term_set_font_name().

	* vt.c (vt_delete_char): Fixed typo in if test.
	(vt.c): Removed globals inadvertantly left in the code.
		Renamed mem_* functions to vt_mem_* functions.
	(vt_scrollback_set): New function.
	(parse_vt): Now reads \E] command - set text options, although
		does not process it.
		Multiple arguments were being passed to \EM command
		- reverse scroll, wrongly.
	(vt_modeh/l): Detects/removes application cursor key mode.
	
	* zvtterm.c (zvt_term_fix_scrollbar): Added new function.
		Signals adjustemnt when a change occurs.
	(zvt_term_size_allocate): Added call to zvt_term_fix_scrollbar.
	(zvt_term_readdata): Added call to zvt_term_fix_scrollbar.
	(zvt_term_init): Fixed signal connect to point to the term widget.
	(zvt_term_scrollbar_moved): Implemented adjustment change callback.
	(zvt_term_selection_handler): Changed to void.  Fixed g_return() macros.
	(zvt_term_size_request): Added input validation.
	(vt_draw_text): Added input validation.
	(vt_scroll_area): Added input validation.
	(zvt_term_init): Added cast to gtk_adjustment_new().
	(zvt_term_set_scrollback): New function.  Calls vt_scrollback_set
		and fixes the scrollbar too.
	(zvt_term_set_fonts): New function.  Sets fonts.
	(zvt_term_set_font_name): New function, sets fonts by name.
	(vt_draw_text): Added underline rendering support.


