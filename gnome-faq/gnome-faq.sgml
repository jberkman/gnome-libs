<!doctype book PUBLIC "-//Davenport//DTD DocBook V3.0//EN" [
<!entity mailweb       "webmaster@gnome.org">
<!entity mailfaq       "gnomefaq@gnu.org">
<!entity mailrequest   "gnome-list-request@gnome.org">
<!entity gnomedevelreq "gnome-devel-list-request@gnome.org">
<!entity majorunam     "majordomo@nuclecu.unam.mx">
<!entity gnomeguireq   "gnome-gui-list-request@gnome.org">
<!entity mailbug       "submit@bugs.gnome.org">
<!entity maildeb       "debian-gtk-gnome@lists.debian.org">
<!entity wwwgtk        "http://www.gtk.org">
<!entity wwwimlib      "http://www.labs.redhat.com/imlib">
<!entity wwwgnome      "http://www.gnome.org">
<!entity wwwgnomelist  "http://www.gnome.org/mailing-lists/index.shtml">
<!entity wwwgnome10    "http://www.gnome.org/gnome-1.0">
<!entity wwwgnomestart "http://www.gnome.org/start/getting.shtml">
<!entity wwwgnomerh    "http://www.gnome.org/start/getting_rh.shtml">
<!entity wwwgnomedeb   "http://www.gnome.org/start/getting_debian.shtml">
<!entity wwwgnomecvs   "http://cvs.gnome.org">
<!entity wwwgnomewicvs "http://www.gnome.org/devel/whatiscvs.shtml">
<!entity wwwsorencvs   "http://www.cinternet.net/~soren/gnome/cvs.shtml">
<!entity wwwgnomeftp   "http://www.gnome.org/ftpmirrors.shtml">
<!entity wwwgnometour  "http://www.gnome.org/start/gnometour.shtml">
<!entity wwwgnomefoo   "http://www.gnome.org/start/gnometour.shtml">
<!entity wwwgnomeguide "http://www.gnome.org/users-guide">
<!entity wwwgnomewmc   "http://www.gnome.org/devel/gnomewm/book1.html">
<!entity wwwgnomemanif "http://www.gnome.org/about/manifesto.shtml">
<!entity wwwgnomebug   "http://bugs.gnome.org">
<!entity wwwgnomebugr  "http://bugs.gnome.org/Reporting.html">
<!entity wwwsusebe     "http://gnome.linuxbe.org">
<!entity wwwsusede     "http://www.tu-harburg.de/skf/Pub/ifmpc118.ifm.uni-hamburg.de/gnome.html">
<!entity wwwbsdport    "http://www.freebsd.org/ports">
<!entity wwwdocbook    "http://www.oasis-open.org/docbook">
<!entity wwwdocbooktut "http://nis-www.lanl.gov/~rosalia/mydocs/docbook-intro.html">
<!entity wwwtoddtheme  "http://www.mindspring.com/~tlewis/screen.jpg">
<!entity wwwgettext    "http://gnu.org/manual/gettext/html_chapter/gettext_toc.html">
<!entity wwwgimp       "http://www.gimp.org">
<!entity wwwgimp32     "http://www.gimp.org/~tml/gimp/win32">
<!entity wwwgnu        "http://gnu.org">
<!entity wwwgnuphil    "http://gnu.org/philosophy">
<!entity wwwgnufree    "http://gnu.org/philosophy/free-sw.html">
<!entity wwwgnuaconf   "http://gnu.org/software/autoconf/autoconf.html">
<!entity wwwgnuamake   "http://gnu.org/software/automake/automake.html">
<!entity wwwgnulibtool "http://gnu.org/software/libtool/libtool.html">
<!entity wwwgcc        "http://gnu.org/software/gcc/gcc.html">
<!entity wwwguile      "http://gnu.org/software/guile/guile.html">
<!entity wwwpng        "http://www.cdrom.com/pub/png">
<!entity wwwftpmail    "http://www.csdl.tamu.edu/~cchung/cpsc689/ftpmail/ftpmtoc.html">
<!entity wwwftpmlist   "http://www.cix.co.uk/~net-services/mrcool/stats.htm">
<!entity wwwi18n       "http://www.vlsivie.tuwien.ac.at/mike/i18n.html">
<!entity gwwwi18n      "http://www.gnome.org/i18n">
<!entity wwwxdnd       "http://www.cco.caltech.edu/~jafl/xdnd/">
<!entity wwwjimpick    "http://jimpick.com">
<!entity wwwdebpack    "http://www.debian.org/~jim/debian-gtk-gnome/README">
<!entity wwwrhqt       "http://charlotte.redhat.com/redhat/qtlicense.html">
<!entity wwwdebkde     "http://www.debian.org/News/1998/19981008">
<!entity wwwredbean    "http://www.red-bean.com/guile">
<!entity wwwschemerpt  "http://www-swiss.ai.mit.edu/~jaffer/r5rs_toc.html">
<!entity wwwfhs        "http://www.pathname.com/fhs/2.0/fhs-toc.html">
<!entity wwwgtktheme   "http://gtk.themes.org">
<!entity wwwlj         "http://www.linuxjournal.com">
<!entity wwwicodes     "http://www.twics.com/~craig/writings/linux-nihongo/node93.html">
<!entity wwwgui        "http://www.jcinteractive.com/gnome-ui/">
<!entity ftpgnome      "ftp://ftp.gnome.org">
<!entity ftpwgn        "ftp://gnomeftp.wgn.net/pub/gnome">
<!entity ftpsnap       "ftp://ftp.jimpick.com/pub/gnome/snap">
<!entity ftpdocware    "ftp://ftp.cygnus.com/pub/home/rosalia/docware">
<!entity dcomcorba     "http://www.research.att.com/~ymwang/papers/HTML/DCOMnCORBA/S.html">
<!entity schmidtcorba  "http://siesta.cs.wustl.edu/~schmidt/corba.html">
<!entity gnomeorder    "<member>glib</member><member>gtk+</member><member>imlib</member><member>orbit</member><member>gtk-doc</member><member>libgtop</member><member>gtk-engines</member><member>gnome-libs</member><member>gnome-core</member><member>control-center</member><member>gnome-print</member><member>mc</member><member>gnome-guile</member><member>gnome-python</member><member>gnome-objc</member><member>gtk--</member><member>anything else, as needed, in whatever order</member>">
]>

<book id="Index">
  <bookinfo>
    <title>GNOME Frequently Asked Questions</title>
    <titleabbrev>GNOME-FAQ</titleabbrev>
    <edition>v1.0.6a</edition>
    <authorgroup>
      <author>
	<firstname>Todd</firstname>
	<othername>Graham</othername>
	<surname>Lewis</surname>
	<authorblurb>
	  <para><email>tlewis@mindspring.com</email></para>
	</authorblurb>
      </author>
      <author>
	<firstname>David</firstname>
	<othername>"Gleef"</othername>
	<surname>Zoll</surname>
	<authorblurb>
	  <para><email>gleef@capital.net</email></para>
	</authorblurb>
      </author>
    </authorgroup>
    <date>March 1, 1999</date>
    <abstract>
      <para>This is the FAQ for GNOME, the GNU Network Object Model
      Environment.</para>
    </abstract>
  </bookinfo>

  <chapter id="Overview">
    <title>GNOME Overview</title>
      
    <para>This section covers questions that pertain to GNOME as
    a whole.</para>

    <sect1>
      <title>What does GNOME stand for?</title>

      <para>GNOME stands for "GNU Network Object Model
      Environment".  GNU stands for "GNU's Not Unix".</para>
    </sect1>

    <sect1>
      <title>What is GNOME?</title>

      <para>GNOME is the GUI desktop of the <ulink url="&wwwgnu;">GNU
      Project</ulink>.</para>
	
      <para>To quote from the original announcement from
      comp.os.linux.announce, GNOME is intended to be "a free and
      complete set of user friendly applications and desktop tools,
      similar to CDE and KDE but based entirely on free
      software."</para>

      <para>I, your lowly FAQ maintainer, like to explain GNOME as
      everything that's expected in a modern programming
      environment. In this respect, it is approximately equivalent to
      CDE, Win32, NextStep, or KDE. The big difference is that, unlike
      any of the above-mentioned examples, every single component of
      GNOME is <ulink url="&wwwgnufree;">Free Software</ulink>.</para>

      <para>For the project geographers out there, here are some of
      the higher mountains to be found in GNOME-land:</para>
      <itemizedlist>
	<listitem>
	  <para>GNOME uses the Object Management Group's Common Object
	  Request Broker Architecture to allow software components to
	  inter-operate seamlessly, regardless of the language in which
	  they are implemented, or even what machine they are running
	  on! (See <link linkend="CORBA">CORBA</link>)</para>
	</listitem>

	<listitem>
	  <para>The GNOME community is working hard on developing an
	  object model called Bonobo.  Based on CORBA and similar to
	  Microsoft's Object Linking and Embedding, v2 (OLE2), Bonobo
	  will allow programmers to export and/or import componentized
	  resources. This, for example, would allow users to use
	  whatever editor they like in their development environment,
	  provided that their editor supported via CORBA a
	  standardized editor interface (See <link
	  linkend="Bonobo">Bonobo</link>)</para>
	</listitem>

	<listitem>
	  <para>GNOME is not tied to any one window manager. You can
	  chose your favorite window manager and use it with
	  GNOME. (See <link linkend="WM">Window Manager</link>)</para>
	</listitem>

	<listitem>
	  <para>GNOME uses the Gimp Tool Kit (GTK+) as the graphics
	  toolkit for all graphical applications. GTK+ has tons of
	  neat features, but my three favs are: (1) support for
	  multiple languages, including C, C++, Objective-C, Scheme,
	  Perl, and others; (2) themability, where a user can change
	  the look and feel of all GTK+ apps on a machine while apps
	  are running, which is just unbelievably cool; (3) and
	  finally, GTK+ is licensed under the LGPL, meaning that it is
	  completely Free Software, just like the rest of GNOME. (See
	  <link linkend="GTK">GTK+</link>)</para>
	</listitem>

	<listitem>
	  <para>Along with GTK+, GNOME uses Imlib, an image library
	  for the X Window System which supports multiple image
	  formats, from XPM to PNG, and multiple bit-depths, from
	  24-bit True Color down to 1-bit Black and White, all
	  transparently to the programmer. (See <link
	  linkend="IMLIB">Imlib</link>)</para>
	</listitem>

	<listitem>
	  <para>All GNOME applications are session aware. This means,
	  e.g., that if you shut down the GNOME word processor and
	  then start it back up again, it will open up the document
	  which you had open before, and put your cursor back at the
	  same place. This is accomplished via the X Session
	  Management system, as implemented in the GNOME Session
	  Manager. (See <link linkend="SM">Session
	  Management</link>)</para>
	</listitem>

	<listitem>
	  <para>GNOME uses the DocBook SGML standard for all
	  documentation, which allows programmers to write
	  documentation in a straightforward way. Documentation can
	  then be viewed with the GNOME help browser, or rendered into
	  HTML and viewed with a web browser, or converted into LaTeX
	  or postscript and printed out. (See <link
	  linkend="SGML">SGML</link>)</para>
	</listitem>

	<listitem>
	  <para>GNOME supports the Uniforum standard
	  internationalization and localization methods, allowing
	  support for new languages to be added without even requiring
	  a recompile of the application. (See <link
	  linkend="I18N">Internationalization &
	  Localization</link>)</para>
	</listitem>

	<listitem>
	  <para>GNOME applications will support several Drag and Drop
	  protocols for maximum interoperability with other
	  applications. (See <link linkend="XDND">Drag and
	  Drop</link>)</para>
	</listitem>

	<listitem>
	  <para>GNOME will support 3D programming with OpenGL,
	  allowing people to use 3-dimensional graphics right in their
	  GNOME apps, whether they be scientific applications or
	  games. GNOME uses Mesa, which is a free software
	  implementation of the OpenGL standard. (See <link
	  linkend="OPENGL">OpenGL</link>)</para>
	</listitem>
      </itemizedlist>

      <para>If all of this seems ambitious, that's because it is! Read
      on to find out more!</para>
    </sect1>

    <sect1>
      <title>Where can I find more information, help, or tips on about
      GNOME?</title>

      <para>The GNOME home page is, of course a good place to start:
      <ulink url="&wwwgnome;">&wwwgnome;</ulink>.</para>

      <para>You also should consider joining the gnome-list mailing
      list, it is a very good place to ask for help.</para>
    </sect1>

    <sect1 id="MailingList">
      <title>How do I use these GNOME mailing lists I keep hearing
      about?</title>

      <para>The best place for up-to-date help and information on
      GNOME is the mailing lists.  You can find them listed at <ulink
      url="&wwwgnomelist;">&wwwgnomelist;</ulink>.  The
      general-purpose list for help and discussion is <ulink
      url="mailto:&mailrequest;">gnome-list@gnome.org</ulink>.  To join this
      (or any) of the lists, send email to the <emphasis>request
      address</emphasis>, this is generally the list address with
      "-request" added to the name.  For example the request list for
      gnome-list is <ulink url="mailto:&mailrequest;">
      &mailrequest;</ulink>.  The subject of the email
      <emphasis>must</emphasis> be
      <userinput>subscribe</userinput>.</para>

      <para>
        For questions about developing GNOME applications and
        developing GNOME, suscribe to the <ulink
        url="mailto:&gnomedevelreq;">gnome-devel-list@gnome.org</ulink>
        mailing list. 
      </para>

      <para>
        If you have a good idea or a great concept on how to improve
        the user interface experience in GNOME, please subscribe to
        the <ulink
        url="mailto:&gnomeguireq;">gnome-gui-list@gnome.org</ulink>.
        The user interface team is lead by Jim Cape who maintains a
        web page with the suggested improvements at <ulink
        url="&wwwgui;">&wwwgui;</ulink>
      </para>

      <para>
        Within a few minutes (possibly a little longer if you aren't
        in North America), you should get an automatic reply back
        asking for confirmation.  Follow the directions in this email,
        and you will be subscribed.  Finally, the system will send you
        two emails with help on how to use the system.
      </para>
    </sect1>

    <sect1 id="Archives">
      <title>How do I get to the mailing list archives?</title>

      <para>There are two ways.  The easiest is to go to the mailing
      list page at <ulink url="&wwwgnomelist;">&wwwgnomelist;</ulink>.
      Click on any of the list addresses on the left, you will be able
      to browse the archives of that list.</para>

      <para>If you need to search the archives, you can use the
      request address for that list.  One of the emails it sent you
      when you first subscribed gives instructions on how to do this.
      If you have lost those instructions, email <ulink
      url="mailto:&mailrequest;">&mailrequest;</ulink> with a subject
      of <userinput>archive help</userinput>.  It will reply with
      instructions on how to use the archive system.</para>
    </sect1>

    <sect1 id="Pronunciation">
      <title>How do I pronounce GNOME?</title>

      <para>GNOME stands for <quote>GNU Network Object Model
      Environment</quote>.  GNU stands for <quote>GNU's Not
      Unix</quote>, and has always been officially pronounced
      <quote>guh-NEW</quote> to minimize confusion.  Since GNU is
      GNOME's first name, GNOME is officially pronounced
      <quote>guh-NOME</quote>.</para>

      <para>However, many people pronounce GNOME as just
      <quote>NOME</quote> (like those short people from legend),
      nobody will hurt you if you find this pronunciation
      easier.</para>
    </sect1>

    <sect1 id="WhyGNOME">
      <title>Why GNOME?</title>

      <para>First, the GNU operating system needs a desktop environment
      that is 100% free software.  GNOME satisfies this need.</para>

      <para>The second goal, by way of the first goal, is that people
      who use free operating systems will have a nice user environment
      in which to work (This works also on other non-free UNIX-based
      systems).</para>

      <para>Finally, GNOME has a lot of really neat features that
      geeks are guaranteed to enjoy. Says one reviewer of this
      FAQ:</para>
      <blockquote>
	<para>Todd, GNOME has technical merits even beyond "open
	source" and "nice environment" and "world domination," as you
	well know...For instance, the COM clone and the use of CORBA
	for inter-operation gives me a woody.</para>
      </blockquote>

      <para>This is certainly true (the fact that GNOME has great
      technical merit; I have no knowledge on the woody front.) Try it
      out for yourself and see!</para>
    </sect1>

    <sect1 id="WhyNot">
      <title>Why not CDE? or KDE? or GNUStep?</title>

      <para>Because GNOME is better!  Seriously though, each of these
      desktop systems have issues which encouraged us to start fresh
      with the GNOME project.</para>

      <para>CDE is not Free Software, it isn't even close.  Many
      people also find it lacking in features, performance and
      functionality.</para>

      <para>At the time of GNOME's inception, KDE had serious
      licensing problems, which they are still trying to resolve.
      First, KDE is based on a library called Qt, which was originally
      non-free.  However TrollTech's recent release of Qt version 2.0
      uses the QPL, so it qualifies as Free Software.  KDE Development
      releases are based on the QPL'ed versions of Qt.</para>

      <para>The other issue is that originally, KDE programs were
      released under the GPL.  The GPL was designed to encourage more
      GNU software, so it doesn't work well when linked to software
      under other licenses.  This incompatibility doesn't prevent
      anyone from using KDE, but it does make it troublesome to
      distribute.  For more details, you can read <ulink
      url="&wwwdebkde;">Debian's position on KDE</ulink>.  KDE is in
      the process of changing their licenses over to the Artistic
      license, which avoids the problem.  However, changing licenses
      on a large project with many authors like KDE is a long and
      difficult process, so it will take them a while.</para>

      <para>The GNOME people like the KDE people, and we consider this
      an unfortunate situation that is in the process of being fixed.
      Hopefully, this will cease to be an issue soon, and GNOME and
      KDE can compete friendlily on technical merit and design.  This
      matter has been hashed out time and time again on the gnome-list
      mailing list.  Asking this question on gnome-list is discouraged
      behavior. If you want to go somewhere and start a flame war on
      this topic, then please do it somewhere far far away where we
      don't have to listen to you.</para>

      <para>There are significant design differences between KDE and
      GNOME.  Top of the list is a difference in widget set.  We find
      GTK+ to be nicer, more customizable, more friendly to
      development in various programming languages, and more flexible
      than Qt; others may disagree.  In all, the projects are
      different enough so that both should be able to coexist and even
      collaborate.</para>

      <para>GNUStep is another desktop environment that has a lot of
      good things going for it.  One issue with GNUStep are that they
      are trying to reimplement the OpenStep desktop and API, with
      GNOME we'd rather develop something new and good rather than
      just redo something old, even something old and good.  Also,
      just like Qt strongly pushes C++ on KDE developers, GNUStep
      strongly pushes Objective C on its developers.  GNOME wants to
      remain language agnostic, and support development in whatever
      language you wish to use.</para>
    </sect1>

    <sect1>
      <title>What platforms?</title>

      <para>GNOME was started by several people well-known in the
      Linux and GNU communities, but it is intended to run on any
      modern and functional Unix-like system. GNOME has been reported
      to work under the following:</para>
      <simplelist>
	<member>GNU/Linux</member>
	<member>BSD (FreeBSD, NetBSD and OpenBSD)</member>
	<member>Solaris</member>
	<member>IRIX</member>
	<member>HP-UX</member>
	<member>AIX</member>
	<member>probably some others; I have not really kept
	track. </member>
      </simplelist>

      <para>If you try GNOME on other platforms and it works, then
      please be sure to let me know so that I can include it here. If
      you try it on another platform and have trouble, then please
      report the difficulties which you encounter, so that the GNOME
      developers can work on the problem. (See <link
      linkend="BugReport">Reporting Bugs</link>.)</para>
    </sect1>

    <sect1>
      <title>Can I still run my programs under GNOME?</title>

      <para>GNOME doesn't replace your system, it runs on top of it.
      All programs that run without GNOME should run fine alongside
      GNOME.</para>
    </sect1>

    <sect1 id="WM">
      <title>What is a window manager, and what does it have to do with
      GNOME?</title>

      <para>A window manager is a program within the X Windows
      environment which controls the placement and appearance of
      windows on the screen.  Look at an xterm or something.  The box
      of terminal text is the actual xterm, the border, title bar,
      buttons and so forth are all handled by the window manager.
      Some window managers have extra features, but all handle window
      placement and decoration.</para>

      <para>There are many window managers out there, and GNOME should
      work well with all of them.  There are a few GNOME features
      (such as session management, and the GNOME pager), that won't
      work with all of them.  For best results, go with a
      GNOME-compliant window manager.  The two most compliant are
      currently Enlightenment and IceWM, with FVWM, SCWM, Window
      Maker, AfterStep and QVWM putting finishing touches on
      GNOME-compliance as we speak.</para>
    </sect1>

    <sect1 id="FreeSoftware">
      <title>You've said that GNOME is Free Software.  What does Free
      Software mean?</title>

      <para>Most software licenses are designed to limit the users
      freedom to use, examine, modify and distribute the software.  In
      the GNOME project, and the Free Software community in general,
      we believe that such restrictions are unethical, and we endeavor
      to produce quality software that is free of such restrictions.
      This is what we call Free Software.  Traditionally, it has
      referred to software which allows three types of freedom:</para>

      <itemizedlist>
	<listitem>
	  <para>The freedom to study how the program works and adapt
	  it to your needs.</para>
	</listitem>
	<listitem>
	  <para>The freedom to redistribute copies so you can share
	  with your neighbor.</para>
	</listitem>
	<listitem>
	  <para>The freedom to improve the program, and release your
	  improvements to the public, so that the whole community
	  benefits.</para>
	</listitem>
      </itemizedlist>

      <para>More recently, a fourth freedom has started being
      restricted by licenses, the freedom to use the software.  Since
      software licenses are based on copyright law, and copyright law
      only addresses distribution, not use, we assumed that freedom of
      use goes without saying.  Suffice it to say that while freedom
      of use is not part of the traditional definition of Free
      Software, the concept does include that freedom.</para>

      <note>
	<comment>Note to translators, please translate the following
	note, including all instances of the word "free" carefully,
	except leave the <literal>free</literal> in English.</comment>

	<para>If the following paragraph is hard to understand in
	translation, forgive me.  Unlike most languages, in English
	the word used in both <quote>free beer</quote> and <quote>free
	speech</quote> is <literal>free</literal>.  This causes some
	confusion when discussing Free Software.</para>
      </note>
      <para>Free Software is a matter of liberty, not price.  To
      understand the concept, think "Free Speech" not "Free Beer".
      The Free Software community is not at all against the concept of
      selling copies of software, or programmers making a living.  We are
      not against commercial software, we are against
      proprietary software.  For more information, check out the
      articles at <ulink url="&wwwgnuphil;">
      &wwwgnuphil;</ulink>.</para>

      <para>In the GNOME project, we protect the user's freedom by
      using the GNU General Public License (GPL) and the GNU Lesser
      General Public License (LGPL, formerly known as the GNU Library
      GPL).  These licenses are carefully designed with legal advice
      to produce a <quote>copyleft</quote>.  That is a copyrighted
      work that guarantees that it will always be freely
      redistributable.  This is by making sure that modifications and
      derivative works are also covered under the GPL.</para>

      <para>The main GNOME applications (and a few of the libraries)
      are covered under the GPL.  Most of the core GNOME libraries use
      the LGPL, to allow other free (and proprietary) software
      licenses to be used when making GNOME software, while still
      protecting the libraries from being restricted.</para>
    </sect1>

    <sect1 id="OpenSource">
      <title>Is GNOME Open Source(tm) Software?</title>

      <para>The short answer is yes.  The GPL and LGPL used for GNOME
      are explicitly listed as examples for the "Open Source"
      definition.  However, we try to avoid using the term Open Source
      to describe GNOME, since not only does the term deliberately
      hide the freedom inherent in Free Software, but the term is
      being used for software which is not Free.</para>

      <para>The term was developed to try to bring Free Software to
      businesses who didn't want to hear about Freedom.  Personally, I
      have found that most businesses like to hear about freedom.  The
      freedom to customize their software to their needs, the freedom
      to change software developers without changing their software,
      the freedom to give copies of their software to their clients
      and subcontractors, these are all freedoms that Free Software
      offers, and proprietary software usually doesn't, that make
      <emphasis>good business sense</emphasis>.  For more on the
      distinction between Open Source and Free Software, see the
      article by Richard M. Stallman at <ulink
      url="&wwwgnuphil;/free-software-for-freedom.html">
      &wwwgnuphil;/free-software-for-freedom.html</ulink>.</para>
    </sect1>
  </chapter>

  <chapter id="GettingGNOME">
    <title>Getting GNOME</title>

    <para>There are many ways to get GNOME on your system.  This
    section covers the most common questions involved in the
    process.</para>

    <sect1 id="SystemRequirements">
      <title>What are the System Requirements for GNOME?</title>

      <para>Currently, you need a machine with Unix or a Unix-like
      operating system installed, with the X Window System (X11R5 or
      later).  You need at least 16MB of RAM, although I expect you'll
      be happier with 32MB or more.  If you are just installing
      binaries, you need about 30MB of disk space, count on needing at
      least 200MB of disk space if you are compiling from
      source.</para>
    </sect1>

    <sect1>
      <title>What's the best format to get GNOME for my
      machine?</title>

      <para>It depends on what kind of computer you have, and what you
      want to do with GNOME.  If in doubt, the officially supported
      way to install GNOME is from the latest set of tarballs (the
      files ending in <quote>.tar.gz</quote>) from <ulink
      url="&ftpgnome;">&ftpgnome;</ulink> or its mirrors. Look in the
      /pub/GNOME/sources directory for the various packages.  The full
      list of FTP mirrors is at <ulink
      url="&wwwgnomeftp;">&wwwgnomeftp;</ulink>, in an emergency, try
      <ulink url="&ftpwgn;">&ftpwgn;</ulink>.</para>

      <para>If you want the up to the minute, bleeding edge
      development version of GNOME, CVS is the way to go.  There is no
      guarantee that the CVS version will even compile, much less
      work, but bug reports are quite appreciated.  If this sounds
      like its for you, you can find more information on getting the
      CVS version at <ulink url="&wwwgnomewicvs;">&wwwgnomewicvs;</ulink>
      and <ulink url="&wwwsorencvs;">&wwwsorencvs;</ulink>.</para>

      <para>If you don't want to deal with compiling GNOME, and you
      are on a common system, there might be precompiled binary
      packages available for you.  Currently there are packages for
      RedHat, SuSE 6.0, Debian and LinuxPPC systems.  Until recently
      there were Solaris packages as well, as soon as we have good
      ones we will offer these as well.  Find out more about the
      various distributions at <ulink
      url="&wwwgnomestart;">&wwwgnomestart;</ulink>.</para>
    </sect1>

    <sect1>
      <title>What do I need on my computer before I install
      GNOME?</title>

      <para>There are a few things that GNOME counts on your system
      having, if you don't have them, or have an older version,
      install or upgrade the following packages before you start the
      process of installing GNOME.</para>
      <simplelist>
	<member>libjpeg (6b or higher)</member> 
	<member>libpng (1.0.1, 1.0.3 or higher <emphasis>not
	1.0.2</emphasis></member>
	<member>libungif (3.0 or higher)</member>
	<member>libtiff (3.4 or higher)</member>
	<member>libgr (2.0 or higher)</member>
	<member>ImageMagick (4.0.5 or higher)</member>
	<member>zlib (1.1.2 or higher)</member>
	<member>guile (1.2 or higher)</member>
	<member>Berkeley DB (1.85 or higher)</member>
      </simplelist>

      <para>In addition, there are a few libraries that, while not
      technically a part of GNOME, are often distributed with it. Make
      sure you have:</para>
      <simplelist>
	<member>glib (1.2 or higher)</member>
	<member>gtk+ (1.2 or higher)</member>
	<member>ORBit (0.4.0 or higher)</member>
	<member>Imlib (1.9.3 or higher)</member>
      </simplelist>

      <para>Some of the bells and whistles require a GNOME-compliant
      window manager to work.  Currently these are Enlightenment,
      IceWM, and Window Maker.  In addition both FVWM and SCWM are
      putting the finishing touches on their GNOME support.  GNOME
      does not include a window manager, and will work well with any
      window manager, these just give you a few extras.</para>

      <para>Lastly, there are some libraries that are needed by a few,
      non-critical programs within GNOME.  If you are running short on
      space or time, you can safely skip these.  If you want all the
      bells and whistles to work, you will want these:</para>
      <simplelist>
	<member>libgtop (0.99 or higher)</member>
	<member>esound (0.2.8 or higher)</member>
	<member>gtk-engines</member>
      </simplelist>
    </sect1>

    <sect1 id="Order">
      <title>What order should I deal with the GNOME packages?</title>

      <para>There is no one answer to this question, but here's an
      order that should work well:</para>
      <simplelist>
	&gnomeorder;
      </simplelist>
    </sect1>

    <sect1>
      <title>How do I get GNOME tarballs?</title>

      <para>Tarball (i.e. compressed archives of the source code using
      tar and gzip) releases of GNOME are made at <ulink
      url="&ftpgnome;">&ftpgnome;</ulink> under the <ulink
      url="&ftpgnome;/pub/GNOME">/pub/GNOME/</ulink> directory. These
      files are then copied to the GNOME FTP mirror sites, listed at
      <ulink url="&wwwgnomeftp;">&wwwgnomeftp;</ulink>. If both the
      ftp and web site are down, a relatively safe mirror is at <ulink
      url="&ftpwgn;">&ftpwgn;</ulink>.</para>

      <para>These tarballs are the only official releases of GNOME,
      and the only version that the developers can be guaranteed to
      have direct control over.  Currently, the most recent versions
      of each package can be found in <ulink
      url="&ftpgnome;/pub/GNOME/sources/latest">
      sources/latest</ulink>, the current grouping of tarballs for the
      GNOME-1.0 release are in <ulink
      url="&ftpgnome/pub/GNOME/gnome-1.0/sources">
      gnome-1.0/sources</ulink>.</para>

      <para>If you want up-to-date development tarballs of GNOME,
      <ulink url="&wwwjimpick;">Jim Pick Software</ulink> posts
      daily snapshots of the development tree in tarball form. You can
      get them at <ulink url="&ftpsnap;">&ftpsnap;</ulink>. Generally
      he keeps a few key days of each package on file, and diff files
      so that you can recreate the snapshots of any other day.  Note
      that these are not releases, they are unstable snapshots, and
      should not be used in a production system unless you know
      exactly what you are doing.</para>
    </sect1>

    <sect1>
      <title>How do I get GNOME from CVS?</title>

      <para>CVS is a very useful tool, not only for developers, but
      for users who want to have up-to-the-second access to the
      development tree.  However, using CVS is a little involved for
      this section of the FAQ.  Two good places to start are the
      <quote>What is CVS?</quote> section of the website at <ulink
      url="&wwwgnomewicvs;">&wwwgnomewicvs;</ulink>, and the <link
      linkend="GNOMEr">Becoming a GNOMEr</link> section below.</para>
    </sect1>

    <sect1 id="FTPMail">
      <title>My only access to the internet is email.  How do I get
      GNOME?</title> 

      <para>If you are so disconnected from the internet that you only
      have email access, there are remailers out there that allow you
      to use FTP via email.  Send a message with a body of
      <command>help</command>, with no quotes or punctuation to
      bitftp@pucc.princeton.edu or webmail.ucc.ie.  It may be slow,
      but it will allow you to download GNOME tarballs via email.
      Check out <ulink url="&wwwftpmail;">&wwwftpmail;</ulink> or
      <ulink url="&wwwftpmlist;">&wwwftpmlist;</ulink> for an up to
      date list of available FTPMail sites.</para>

      <para>The FTP sites you would be accessing through FTPMail are
      detailed above in <quote>How do I get GNOME Tarballs</quote>,
      you would just use the FTPMail interface rather than directly
      FTPing to the site.</para>
    </sect1>

    <sect1 id="GetttingRH">
      <title>I'm running RedHat Linux, how do I get RPMs?</title>

      <para>Periodically, RedHat Labs produces RPMs of the GNOME
      releases for RedHat Linux, and they get put on the website. The
      latest version is currently in <ulink
      url="&ftpgnome;/pub/GNOME/gnome-1.0/redhat">
      gnome-1.0/redhat</ulink>.  They are built for alpha, sparc and
      i386 platforms.  Make sure you get the RPMs from the noarch
      directory as well, whichever platform you are on. Step-by-step
      instructions for these RPMs can be found at <ulink
      url="&wwwgnomerh;">&wwwgnomerh;</ulink>.</para>

      <para>These RPMs should also work fine for Mandrake Linux, and
      the MacMillian and CheapBytes RedHat distributions as well.
      These RPMs are likely to have problems with Caldera, S.u.S.E.,
      and other RPM-based distributions; read below for more help for
      these systems.</para>

      <para>These RPMs are compiled for sound support, which is great
      unless you have no sound card on your system.  If someone wants
      to maintain a RedHat Linux RPM distribution compiled
      <emphasis>without</emphasis> sound support, we will gladly put
      it on FTP as well.</para>
    </sect1>

    <sect1 id="GettingDebian">
      <title>I'm running Debian GNU/Linux, how do I get .deb
      packages?</title>

      <comment>Thank you Havoc! :-)</comment>

      <para>The most up-to-date Debian packages are distributed on the
      Debian sites (and mirrors) in <ulink
      url="http://www.debian.org/Packages/unstable/x11/">
      debian-unstable</ulink>.  Step-by-step instructions are at
      <ulink url="&wwwgnomedeb;">&wwwgnomedeb;</ulink>.</para>

      <para>To get the Debian packages, you just do the following:</para><screen>
<prompt>$</prompt> <userinput>apt-get update</userinput>
<prompt>$</prompt> <userinput>apt-get install gnome-control-center gnome-panel gnome-session gnome-games gnome-terminal gnome-utils</userinput></screen>

      <para>The Debian package maintainers are volunteers, and they
      try to test things thoroughly before releasing, so if you don't
      see the latest release in deb format right away, please be
      patient.  Better yet, if you want to help prepare the Debian
      packages for distribution, there is a mailing list at <ulink
      url="mailto:&maildeb;">&maildeb;</ulink>, and instructions on
      how to access the staging area at <ulink
      url="&wwwdebpack;">&wwwdebpack;</ulink>.</para>

      <para>Since the Debian GNOME packages are already being
      distributed with Debian, we don't currently mirror them here.
      There doesn't appear to be any need to.  If there is a real need
      for us to mirror these packages, just let us know and we
      will.</para>
    </sect1>

    <sect1 id="GettingSuSE">
      <title>I'm running S.u.S.E. Linux, how do I get RPM packages?</title>
 
      <para>There is an excellent GNOME for SuSE page at
      <ulink url="&wwwsusebe;">&wwwsusebe;</ulink>(Belgium) and
      <ulink url="&wwwsusede;">&wwwsusede;</ulink>(Germany).  They
      currently have instructions and RPMs for SuSE v6.0, with v5.3
      RPMs coming soon.  Check it out for more information.</para>
    </sect1>

    <sect1 id="GettingOtherRPM">
      <title>I'm running Caldera OpenLinux, or some other RPM-based
      Linux distribution, how do I get RPM packages?</title>

      <para>Just because two distributions use RPMs doesn't mean they
      can use the same RPMs, for example, RedHat and Caldera use
      different versions of libc, so RedHat binary RPMs probably won't
      work on Caldera.  One trick that might work is to take the SRPMS
      from the RedHat distribution, and use <command>rpm
      --rebuild</command> on them, and then install the resulting
      binary RPMs.  Otherwise, you probably have to follow the tarball
      instructions.</para>
    </sect1>

    <sect1 id="GettingFreeBSD">
      <title>I'm running FreeBSD, how can I get GNOME via Ports?</title>

      <comment>Thank you Stanislav Shalunov! :-)</comment>

      <para>FreeBSD has ports and packages for various GNOME
      applications (including Gnumeric) as well as a port for the
      entire GNOME project that will install all GNOME-specific
      programs via dependencies.  If you have the CDROM mounted under
      <filename>/cdrom</filename> (the name of the mountpoint
      <emphasis>is</emphasis> important) or you have a working
      internet connection and the time to download for a while, you
      can install GNOME on your FreeBSD box (3.1 or later, possibly
      early as well) by typing:</para><screen>
<prompt>$</prompt> <userinput>cd /usr/ports/x11/gnome && make install</userinput></screen>

      <para>To learn more about the FreeBSD Ports Collection you can
      visit <ulink url="&wwwbsdport;">&wwwbsdport;</ulink>.  If you
      don't have an internet connection, but do have a docs
      distribution, you can also find more information at
      <filename>/usr/share/doc/handbook23.html</filename>.  This
      document will also tell you how to install GNOME as pre-built
      packages (binaries) using <command>pkg_add</command>, if you
      have the CDROM.  Currently (for 3.1-RELEASE), you will need to
      install the following packages: <filename>gnomelibs</filename>,
      <filename>gnomeaudio</filename>, <filename>gnomecore</filename>,
      <filename>gnomegames</filename>,
      <filename>gnomeprint</filename>, <filename>gnumeric</filename>,
      and <filename>libgtop</filename>.  A listing of the latest
      versions available can be found at <ulink
      url="&wwwbsdport;/gnome.html">&wwwbsdport;/gnome.html</ulink>.</para>
    </sect1>

    <sect1 id="GettingOtherUnix">
      <title>I'm running Solaris, AIX, HP-UX, BSDI, SCO, IRIX, or some
      other Unix or Unix-like system, can I get binary
      packages?</title>

      <para>There used to be binary packages for Solaris that someone
      made, but the packages seem to have disappeared (it was an old
      version of GNOME anyway).  If a good set of binary packages for
      any of these systems becomes available, we can probably put them
      on the FTP site.</para>

      <para>In absence of a binary version, you're going to need to
      use the tarballs.  If your system doesn't have a compiler, the
      <ulink url="&wwwgnu;">GNU Project </ulink> offers the GNU C
      Compiler (gcc) for Free on pretty much every platform out there.
      Go to <ulink url="&wwwgcc;">&wwwgcc;</ulink> for more
      information.</para>
    </sect1>

    <sect1 id="GettingWindows">
      <title>I'm running Microsoft Windows, can I get GNOME?</title>

      <comment>Thank you David Wheeler!</comment>

      <para>Currently the answer is no, GNOME hasn't been ported to
      the Windows platform, there is an effort going on to make such a
      port possible.  If you really really need a version for Windows,
      count on doing lots of work and coordinating with related efforts.</para>

      <para>Tor Lillqvist has been porting several graphical libraries
      used by GNOME to the Win32 (Microsoft Windows 95/98/NT)
      platform.  More info on his efforts can be found at <ulink
      url="&wwwgimp32;">&wwwgimp32;</ulink>.  He's already ported
      glib, gtk+, gdk_imlib, and a few other libraries involved in
      generating graphics to Win32.</para>

      <para>His goal is to get Gimp working fully on the platform (it
      already works partially), but his work brings GNOME much closer
      to being portable to Windows.  A number of GNOME applications
      need just his libraries (possibly with some more debugging),
      libpng, gnome-libs and ORBit.  If someone were to port these,
      many GNOME applications could be compiled and run on
      Windows.</para>

      <para>If you are interested in working on such a project, make
      sure to carefully read the documentation of <ulink
      url="&wwwgnuaconf;"> Autoconf</ulink>, since that's how we
      differentiate between different system capabilities in GNOME.
      Also, take a close look at Cygnus Solution's <ulink
      url="http://sourceware.cygnus.com/cygwin/">CygWin32</ulink>
      libraries and utilities.  They will make such a task much
      easier.</para>
    </sect1>
  </chapter>

  <chapter id="CompilingGNOME">
    <title>Compiling GNOME</title>

    <sect1>
      <title>What order do I compile the packages in?</title>

      <para>It is important that you compile and install the GNOME
      packages in the proper orders.  There are some serious
      dependencies within the GNOME tree.  Here is my suggested order,
      you should compile and install each package before you move onto
      the next.  On ELF-based systems (such as GNU/Linux and FreeBSD),
      you should also run <command>ldconfig</command> after each
      package, just to be sure any new libraries are found.</para>
      <simplelist>
	&gnomeorder;
      </simplelist>
    </sect1>

    <sect1>
      <title>How do I configure the source code for my system?
      (or... Where are the Makefiles hiding?)</title>

      <para>GNOME uses configure (generated by Autoconf) to set up the
      source code to compiler properly on your system. Configure will
      investigate how your system is set up, and define compiler
      constants to add or remove various pieces of code as
      needed.</para>

      <para>Configure accepts a variety of options, type
      <command>./configure --help</command> for the full list.  The
      most important one is <userinput>--prefix</userinput>, which
      tells the system where GNOME is to be installed.  If you omit
      the prefix, configure assumes you want
      <filename>/usr/local</filename>.  Most RPMs use a prefix of
      <filename>/usr</filename>.  Many users prefer to use a prefix of
      <userinput>/opt/gnome</userinput>, which requires a little
      advance preparation, described below.</para>

      <para>Configure also checks certain environment variables. Set
      your <envar>CFLAGS</envar> to equal whatever compiler options
      you want to make sure get passed, for example
      <userinput>-O6</userinput> will maximize optimization,
      <userinput>-g</userinput> will include debugging symbols,
      etc.</para>
    </sect1>

    <sect1>
      <title>Where is configure hiding?</title>

      <para>You're getting your code from CVS, aren't you?  Read the
      <link linkend="GNOMER">Becoming a GNOMEr</link> section
      below. If you got a tarball, configure should be in the top
      directory of the source.  If it's not there, that's a bug.  See
      the <link linkend="BUGREPORT">How do I report a bug?</link>
      question.</para>
    </sect1>

    <sect1>
      <title>OK, I've got a Makefile now. How do I get GNOME on my
      system?</title>

      <para>From here, it's pretty straightforward.  You type
      <command>make</command>, followed by <command>make
      install</command>.  On most systems (including GNU/Linux), this
      should be followed by <command>ldconfig</command>.  If you're in
      a rush, you can sometimes skip <command>make</command>, since
      <command>make install</command> will usually make everything
      that hasn't been made yet.  If you want to start the whole
      process and forget about it, and are running the Bourne shell or
      its derivatives (eg. ksh or bash), put all four commands on one
      line, separated by <userinput>&&</userinput>.  For
      example:</para><screen>
<prompt>$</prompt> <userinput>./configure --prefix=/usr/local && make && make install && ldconfig</userinput></screen>
	
      <para>The <userinput>&&</userinput> makes sure that the first
      command succeeded before going onto the next one.</para>

      <para>Once you've done <command>make install</command> (and
      <command>ldconfig</command> if needed), you can continue on to
      the next package.</para>
    </sect1>

    <sect1>
      <title>How do I put GNOME someplace special, like
      <filename>/opt/gnome</filename>?</title>

      <para>Many people like to put GNOME off by itself, in its own
      directory.  Doing this makes it easier to uninstall in an
      emergency, easier to control who has access to GNOME, it lets
      you export the gnome directory to other systems, and so on. To
      do this requires a little bit of preparation, and knowledge of
      your system.  For this discussion, I'll be putting GNOME in the
      <filename>/opt/gnome</filename> directory.  Just replace
      <filename>/opt/gnome</filename> with whatever other directory
      you want.</para>

      <para>The biggest issue are making sure the system can find the
      GNOME binaries in <filename>/opt/gnome/bin</filename>, the
      libraries in <filename>/opt/gnome/lib</filename>, and the man
      files in <filename>/opt/gnome/man</filename>.</para>

      <para>To tell the system to look into
      <filename>/opt/gnome/bin</filename> to find the GNOME binaries,
      just make sure it is included in the <envar>PATH</envar>
      environment variable.  For example:
      <userinput>PATH="/bin:/usr/bin:/opt/gnome/bin"</userinput>.</para>

      <para>Then, you generally need to tell the loader where to find
      the libraries.  On most commercial Unixes, you add
      <filename>/opt/gnome/lib</filename> to the environment variable
      <envar>LD_LIBRARY_PATH</envar>, in the same manner as
      <envar>PATH</envar>, above.  On some systems, you use
      <envar>LD_RUN_PATH</envar> instead.  On systems using ELF format
      binaries, such as GNU/Linux or FreeBSD, you add the
      library path to the file <filename>/etc/ld.so.conf</filename>,
      and run <command>ldconfig</command>.  On statically linked
      systems, you don't have to worry about any of the above, but buy
      more hard drive space, you are sure to need it.  Consult your
      system documentation if you are unsure how to tell the loader
      which directories to search.</para>

      <para>You also should tell man where to find man pages installed
      by GNOME.  Simply insert a line into
      <filename>/etc/man.config</filename>, saying <userinput>MANPATH
      /opt/gnome/man</userinput>.</para>

      <para>The other issue is there are a couple of directories which
      GNOME will put things in, which would be better put elsewhere.
      The easiest way of doing this is with symbolic links.  Type the
      following:</para><screen>
<prompt>$</prompt> <userinput>mkdir /opt/gnome/share</userinput>
<prompt>$</prompt> <userinput>cd /opt/gnome/share</userinput>
<prompt>$</prompt> <userinput>ln -s /usr/share/locale locale</userinput>
<prompt>$</prompt> <userinput>ln -s /usr/share/aclocal aclocal</userinput></screen>

      <para>Now you're all set to use <filename>/opt/gnome</filename>
      as a prefix when compiling.  To do this, just give the
      <command>./configure</command> command the option
      <option>--prefix=/opt/gnome</option>.  Of course, if you want
      someplace special other than <filename>/opt/gnome</filename>,
      just replace it with the directory you do want in all the
      instances above.</para>
    </sect1>

    <sect1 id="FHS">
      <title>How do I compile GNOME with all the files in the right
      place for FHS Compliance?  How do I relocate GNOME's etc and var
      directories to easily network GNOME?</title>

      <comment>Thank you Raja R. Harinath!</comment>

      <para>By default, GNOME puts all of its files under its prefix
      directory.  While this makes GNOME easy to isolate, it's not
      necessarily the best place for certain files in some situations.
      In particular, if you are looking to network GNOME, or for
      strict <ulink url="&wwwfhs;">FHS</ulink> compliance, you might
      want to relocate some directories.  To relocate GNOME's etc
      directory, use the <option>--sysconfdir</option> option.  To
      relocate the var directory, use the
      <option>--localstatedir</option> option.</para>

      <para>For example, an FHS installation of GNOME might have a
      prefix of <filename>/opt/gnome</filename>.  However, it's etc
      files should be in <filename>/etc/opt/gnome</filename>, and
      similarly, its var files should be in
      <filename>/var/opt/gnome</filename>.  This has the advantage of
      allowing you to network the <filename>/opt/gnome</filename>
      directory, keep it read-only, and allow machines to have local
      configuration and information without worrying about other
      machines.  To do this, the configure command would be as
      follows: <userinput>./configure --prefix=/opt/gnome
      --sysconfdir=/etc/opt/gnome
      --localstatedir=/var/opt/gnome</userinput>.</para>
    </sect1>

    <sect1>
      <title>I'm done with this module, how do I get rid of all the
      object files and other cruft from the source tree?</title>

      <para>You have three options, <command>make clean</command>,
      <command>make distclean</command> or removing the
      directory. Using <command>make clean</command> will remove all
      the object files, built executables, and miscellaneous cruft,
      it's nice and safe.  The next option, <command>make
      distclean</command> should remove everything that wasn't in the
      original tarball. If you do this, you will not be able to <link
      linkend="UNINSTALL">uninstall the module</link>.  The same goes
      for removing the source directory.  Basically, <command>make
      clean</command> is good for general use, the others should be
      considered drastic measures.</para>
    </sect1>

    <sect1 id="Uninstall">
      <title>How do I uninstall a module?</title>

      <para>If you are using a package management system (such as
      RPM), just follow its documentation for uninstalling.</para>

      <para>If you have installed a module from source code, and you
      think you may want to uninstall it, <emphasis>make sure you keep
      your source tree</emphasis>.  Just go to the module's source and
      run <command>make uninstall</command>.  It should go through and
      remove all the files it installed.</para>
    </sect1>
  </chapter>

  <chapter id="UsingGNOME">
    <title>So now I've got GNOME, what do I do with it?</title>

    <para>Now we talk about getting started with GNOME, and things
    that you can do with it.</para>

    <sect1>
      <title>Where should I look first?</title>

      <para>There is a slightly outdated but still useful tour to
      GNOME at <ulink url="&wwwgnometour;">&wwwgnometour;</ulink>.  It
      is certainly worth a look.</para>

      <para>Also, make sure you check out the GNOME Users Guide at
      <ulink url="&wwwgnomeguide;">&wwwgnomeguide;</ulink>.</para>
    </sect1>

    <sect1>
      <title>How do I start GNOME?</title>

      <para>The proper way to start GNOME with all its features is to
      put the line <userinput>exec gnome-session</userinput> at the
      end of your X startup script.  This script can be called
      <filename>~/.xinitrc</filename>, <filename>.xsession</filename>
      or <filename>.Xclients</filename>, depending on your platform
      and configuration.  Of course, make sure that the GNOME binaries
      are in your path, and there are no lines starting with
      <userinput>exec</userinput> prior to the one you just added.
      With gnome-core versions 1.04 and later, you can select the
      window manager run by setting the <envar>WINDOW_MANAGER</envar>
      variable to the one you want.</para>

      <para>Running <command>gnome-session</command> like this will
      run the default session, the first time in.  This includes your
      window manager of choice (or a good guess if you didn't specify
      it), the panel, GNOME Midnight Commander, and the help browser.
      As you use GNOME, session management will save your current
      desktop.  If you log out, and log back in later, your most
      recent desktop will be restored.</para>

      <para>If you don't want session management, GNOME will work fine
      without it.  Put the line <userinput>exec gnome-wm</userinput>
      at the end of your X startup script, as described above.  It
      will still use the WINDOW_MANAGER environment variable to select
      your window manager, but not bother with session management.
      Run panel, gmc, or whatever as desired, either manually, or in
      the startup script before the exec line.  For example:</para>

      <screen>
panel &
gmc &
exec gnome-wm</screen>
    </sect1>

    <sect1>
      <title>How do I run GNOME programs?</title>

      <para>First of all, GNOME programs can be run just like any
	other programs.  You go to a command prompt, you type their
	name, and the program runs.</para>

      <para>Secondly, you can run programs from the panel menu.
	Most GNOME programs (and some non-GNOME ones too) are
	installed on the Foot menu in the GNOME panel.  Some programs
	of note on this menu; File Manager runs the GNOME version of
	Midnight Commander, Settings->Menu Editor will let you add or
	remove things from the Foot (or other menus), Settings->GNOME
	Control Center will get you the program to configure most of
	GNOME (and a few other things like Enlightenment),
	Games->Gnobots is a very addictive game.</para>
    </sect1>

    <sect1>
      <title>How do I run the GNOME Panel?</title>

      <para>The GNOME panel is often started from
      <command>gnome-session</command>, if it is not, you can just
      type <command>panel</command> at any command prompt to start the
      panel.</para>

      <para>Add things to the panel by either the Foot's Panel menu,
      or by the menu you get by right clicking on the panel.  The
      <ulink url="&wwwgnomeguide;">GNOME User's Guide</ulink> has an
      entire <ulink url="&wwwgnomeguide;/paneluse.html">
      Chapter</ulink> on how to use the Panel.</para>
    </sect1>

    <sect1>
      <title>How can I use WindowMaker with GNOME</title>

      <para>
        In order to get the gmc and panel menu stuff on the root
        window under Window Maker, you need to move the Window Maker
        Applications menu so that it is activated by the middle or
        left mouse button.  By default, the gmc and panel root menu is
        mapped to the right mouse button.  Unfortunately, the Window
        Maker Applications menu is also mapped to the right mouse
        button by default.
      </para>
      <para>
        To correct this, bring up the Window Maker Configuration tool
        by going to the Control Panel, selecting the Window Manager
        subsection under Desktop and hitting the "Run Configuration
        Tool For Window Maker" button.  When the configuration tool
        comes up, select the mouse icon.  Under the "Workspace Mouse
        Actions", move the Applications menu to the middle mouse
        button, move the "Select windows" to the left mouse button and
        deselect the "Window list menu" option (you can use the GNOME
        pager to do the same thing as the Window list menu does).
        Save the new configuration.  The next time that you use the
        right mouse button the root menu, you should get the gmc and
        panel menu.  Under there, you can rescan/refresh the desktop
        and recreate icons, etc.
      </para>
    </sect1>

  </chapter>

  <chapter id="Help">
    <title>Help!!!!!!!!</title>

    <para>Even if you have followed every instruction to the letter,
    sometimes unforeseen problems arise.  Anything can go wrong, from a
    misreading of the instructions, to a bug in the software, to a bug
    in someone else's software.  Here, we try to address problems that
    people have run into with GNOME.</para>

    <sect1>
      <title>General Help.</title>

      <para>Here are some more general questions that arise often.
      Specific problems are later in this chapter.</para>

      <sect2>
	<title>Something is not working, I'm confused, what do I
	do?</title>

	<para>OK, first thing you do is pause, relax, and take a deep
	breath.  Next, look through this FAQ, the Users Guide, and any
	other documentation you have handy and see if any of it comes
	close to solving your problem.  Next, look through the mailing
	list archives (instructions are given <link
	linkend="Archives">above</link>) to see if someone else talks
	about your problem.  Then try whatever it was you were doing
	<emphasis>one more time</emphasis> to see if the solution
	suddenly presents itself.  If none of that works, it's time to
	ask on the list.</para>

	<para>First of all, you are subscribed to gnome-list, right?
	If you aren't, instructions on how to subscribe are given
	<link linkend="MAILINGLIST">above</link>.  Now, when asking
	for help on GNOME-list, <emphasis>give lots of
	detail</emphasis>.  Posting <quote>The panel doesn't work,
	this sucks!</quote> doesn't help you or us.  You still have
	the problem, and we have a possible bug which we have no
	information about.  It is more useful (but still not
	sufficient) to say <quote>Whenever I select the foo item from
	the Foot menu, the entire panel disappears suddenly; by the
	way, what is this file that GNOME keeps putting in my home
	directory, it's called <link
	linkend="Core">core</link>.</quote></para>

	<para>Ideally, we need several pieces of information from
	you. First, exactly what kind of system are you running on?
	No, not everyone runs the same operating system you are using.
	We need processor type: Sparc, MIPS, i386 (this includes
	Pentiums, AMD, Cyrix, etc), PPC, Alpha, ARM, 680x0, et al; we
	need operating system: Linux distribution, FreeBSD, HURD,
	OpenBSD, Solaris, IRIX, CrayOS, OS/400, whatever.  Also
	include the version of the operating system. For example, the
	machine I'm on right now is a GNU/Linux RedHat/i386 Rawhide
	machine, a friend of mine uses a Solaris Sparc 2.6
	machine.</para>

	<para>Next, we need some relevant vital statistics of what is
	on your system.  On a GNU/Linux system, the kernel and libc
	version numbers are almost always relevant.  On almost all
	GNOME problems we need your glib, gtk+, Imlib, ORBit and
	gnome-libs versions.  If you aren't sure if you need any of
	the above, include them anyway.  Other things that are
	sometimes relevant are versions of Perl, X11, Python, Guile
	and libpng, unless you see an error message that mentions one
	of them, you can leave them out.  Also important is how you
	installed GNOME.  Did you use binaries, if so which ones?  Did
	you use tarballs?  Did you use CVS, if so which dates and/or
	tags?  If you used a mixture of the above, tell us.</para>

	<para>Lastly, we need the problem itself.  We need to know
	exactly what you did to get the problem.  We need to know if
	the problem is consistent or intermittent.  We need to know if
	the program output anything prior to the problem.  We need to
	know exactly what happens when you run into the problem.  If
	you want to get ambitious, try some of the diagnostic tools I
	discuss below, such as a backtrace, and include the
	information in the mail.</para>

	<para>Now before you are ready to post, you need to come up
	with a good subject line.  Gnome-list can have a lot of
	messages on it, you want yours to stand out to the people you
	need help from, and be safely passed over by people who can't
	help.  A subject of "GNOME is broken" is likely to get passed
	over; one of "GSM sucks" will get people in an angry mood, not
	a helpful one; something like "Most panel icons on HP-UX are
	just black squares" is likely to get the right sort of
	attention.</para>

	<para>Put this all together into one long email and post it
	onto the list.  If you followed my advice, you are more likely
	to get a quick, thoughtful response. If for some reason you
	don't get a quick response, don't take it personally, the mail
	probably just got lost in the volume.  Wait a couple of days,
	see if there is any detail you can add, or perhaps a more
	descriptive header, and post it again.</para>
      </sect2>

      <sect2 id="BugReport">
	<title>How do I report a bug?</title>

	<para>If you find a bug, we want to know about it, we want to
	track it, and we want to fix it.  To make this process as
	efficient as possible, we borrowed Debian's excellent bug
	tracking system.  Full instructions on how to use it can be
	found at <ulink url="&wwwgnomebugr;">
	&wwwgnomebugr;</ulink>.</para>

	<para>There are a few things to keep in mind in sending bugs
	to the system.  First make sure to check the web front end at
	<ulink url="&wwwgnomebug;">&wwwgnomebug;</ulink> to make sure
	that your bug isn't yet known to the system.  If it is a new
	bug, send it to <ulink url="&mailbug;">&mailbug;</ulink>.
	Make sure you include the Package and Version headings as
	described in the instructions, this will make sure it gets
	routed quickly and automatically to the right people.  Make
	sure you include full details.  See the previous question for
	some suggestions on what is useful to include.  If a backtrace
	or strace is appropriate, by all means include it.
	Instructions on how to do this is given below.</para>

	<para>After you submit the bug to the system.  You will get
	feedback on the bug via email.  You also can track the status
	of the bug through the bug tracking system's web front
	end.</para>
      </sect2>

      <sect2>
	<title>What is a prefix (or a $prefix, ${PREFIX}, or
	&lt;prefix&gt;)?</title>

	<para>When GNOME is compiled, you need to specify where it is
	located in the filesystem.  The option used to specify this is
	called <option>--prefix</option>, so we call it the GNOME
	Prefix, or prefix for short.  GNOME's file locations should be
	the same from system to system, except for the prefix, so a
	file in <filename>/usr/share/gnome/pixmaps</filename> on one
	system may be in
	<filename>/opt/gnome/share/gnome/pixmaps</filename> on
	another, and we would refer to the location as
	<filename>$prefix/share/gnome/pixmaps</filename>.</para>

	<para>If you installed from tarballs (or CVS), but never gave
	<command>configure</command> (or
	<command>autogen.sh</command>) a prefix, the default is
	<filename>/usr/local</filename>.  If you installed the RedHat
	RPMS, they use a prefix of <filename>/usr</filename>.  If you
	still aren't sure, type <command>which panel</command>, and
	remove the <computeroutput>/bin/panel</computeroutput> from
	the end.  What's left is your prefix. </para>
      </sect2>

      <sect2>
	<title>What does <computeroutput>Segmentation
	Fault</computeroutput> mean?</title>

	<para>Most Unix and Unix like systems have a feature called
	memory protection.  What this means is the program is allowed
	to access some parts of memory (often called segments), but
	not others.  If the program tries to access memory outside of
	the segments it is permitted to access, the system detects the
	problem and signals an error.  This error is called a
	Segmentation Fault (abbreviated <quote>segv</quote> on some
	systems), and generally, the program will end suddenly, often
	leaving behind a core dump (see below).</para>

	<para>What it all boils down to is there is a bug in whatever
	program you were running.  The bug might be in the GNOME
	source code, it might be in the shared libraries your program
	uses, or it might be in the way the program was compiled.  If
	you are unsure whether it is a bug in GNOME or somewhere else,
	ask about it on the list.  If you are sure the bug lies within
	GNOME, please make sure it's on the bug tracking
	system.</para>
      </sect2>

      <sect2 id="Core">
	<title>What is a core dump?  What is this file named core that
	I keep running into?</title>

	<para>In the early days of electronic computers, computer
	memory was a bunch of magnetic rings called cores, mounted on
	wires.  This type of memory was called core memory.  When a
	programmer wanted to see what was going on in their program,
	they would output a copy of what was in their core memory so
	they could analyze it.  This output was called a core dump,
	and the term has remained long after core memory became
	obsolete.</para>

	<para>In many Unix and Unix-like systems, the system will
	automatically produce a core dump when a program fails
	catastrophically, for example when it has a Segmentation Fault
	(see above).  It generally puts the core dump into a file
	named <filename>core</filename> in the directory you were in
	when you ran the program.  This file is very useful for
	debugging why the program failed, and can be used to produce a
	backtrace (see below).  On the other hand, this file can be
	quite large, particularly if you aren't using it for
	debugging.  If you can't afford to have core dumps, consult
	your system documentation to find out how to disable this
	feature.</para>
      </sect2>

      <sect2 id="Backtrace">
	<title>What is a backtrace?  Someone just asked me to send
	them a backtrace, how do I do this?</title>

	<para>An incredibly useful debugging tool is the backtrace.
	This is essentially a snapshot of exactly where in the program
	you are.  It is most often done when a program crashes (exits
	unexpectedly, often with a segmentation fault or other error)
	or hangs (stops working but doesn't exit).  In this answer,
	I'm going to have to assume you are using the GNU project's
	GDB debugger, since that's the most common one used with
	GNOME, and the one I've used.  If you use some other debugger,
	consult your documentation.</para>

	<para>There are two ways to do a backtrace.  You can use a
	core file left when the program crashed, or you can run the
	program from within the debugger.  I have found that running
	the program within the debugger is more reliable, but I will
	discuss using core files as well.</para>

	<para>To run a program within GDB, go to an xterm (or
	equivalent), and type <userinput>gdb &lt;full name and
	location of program&gt;</userinput>, for example, to debug
	gtalk, you might do <userinput>gdb
	/usr/local/bin/gtalk</userinput>.  GDB does not search the
	path, so you have to specify where the program is.  If you
	want to run the program with arguments, <emphasis>don't put
	them here</emphasis>.  You can specify command like arguments
	later.</para>

	<para>GDB will then identify itself, and give you a
	<prompt>(gdb)</prompt> prompt.  From here, you type
	<userinput>run</userinput> to start the program.  If you want
	to run the program with arguments, put them here.  For
	example, to debug gtalk with sound disabled, you would type
	<userinput>run --disable-sound</userinput>.  The program will
	then start.  Keep in mind the program will be slower than
	normal, and it will use a lot more memory.</para>

	<para>Now you try to recreate the problem you had.  Do
	whatever it is that caused the problem before.  Once the
	program crashes, you should immediately see stuff in the debug
	session, and a <prompt>(gdb)</prompt> prompt.  If the program
	hangs, wait until you are sure it is hung in the right place,
	and then hit Control-C in the debug session.  It too should
	reply with a bunch of stuff, followed by a
	<prompt>(gdb)</prompt> prompt.  At this prompt (whichever way
	you got to it), type <userinput>bt</userinput>.  It will then
	reply with the actual backtrace.</para>

	<para>Here's an example of a debug session.  If you are asked
	for a backtrace, you should send in the whole
	thing:</para><screen>
<prompt>$</prompt> <userinput>gdb /usr/local/bin/gtalk</userinput>
<computeroutput>GNU gdb 4.17
Copyright 1998 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type "show copying" to see the conditions.
There is absolutely no warranty for GDB.  Type "show warranty" for details.
This GDB was configured as "i386-redhat-linux"...</computeroutput>
<prompt>(gdb)</prompt> <userinput>run --disable-sound</userinput>
<computeroutput>Starting program: /usr/local/bin/gtalk --disable-sound

Program received signal SIGINT, Interrupt.
0x4049290d in __poll (fds=0x808c110, nfds=3, timeout=-1)
    at ../sysdeps/unix/sysv/linux/poll.c:45
../sysdeps/unix/sysv/linux/poll.c:45: No such file or directory.</computeroutput>
<prompt>(gdb)</prompt> <userinput>bt</userinput>
<computeroutput>#0  0x4049290d in __poll (fds=0x808c110, nfds=3, timeout=-1)
    at ../sysdeps/unix/sysv/linux/poll.c:45
#1  0x403c54e9 in g_main_poll (timeout=-1, use_priority=0, priority=0)
    at gmain.c:991
#2  0x403c516e in g_main_iterate (block=1, dispatch=1) at gmain.c:789
#3  0x403c58a1 in g_main_run (loop=0x80882e8) at gmain.c:912
#4  0x401cbf1d in gtk_main () at gtkmain.c:475
#5  0x804a629 in main (argc=2, argv=0xbffffaa4) at main.c:54
#6  0x40407c77 in __libc_start_main (main=0x804a570 &lt;main&gt;, argc=2, 
    argv=0xbffffaa4, init=0x8049e10 &lt;_init&gt;, fini=0x804c7dc &lt;_fini&gt;, 
    rtld_fini=0x40009c10 &lt;_dl_fini&gt;, stack_end=0xbffffa9c)
    at ../sysdeps/generic/libc-start.c:78</computeroutput>
<prompt>(gdb)</prompt></screen>

	<para>To do a backtrace with a core dump is very similar.
	Change directories to the one which has the core dump, and
	then run <userinput>gdb -c core &lt;full name and location of
	program&gt;</userinput>.  Again, GDB doesn't look at your
	path, you have to specify where to find the program.  All you
	then have to do is type <userinput>bt</userinput> at the
	prompt, and send in the whole session.</para>
      </sect2>

      <sect2>
	<title>What is an strace?  Someone asked me to send them one,
	how do I do this?</title>

	<para>The <command>strace</command> command performs a
	"Signal Trace".  Using it will allow you to run a program while
	outputting system calls and signals.  This is a much more
	verbose debugging tool than the backtrace, but sometimes you
	need the extra information an strace can give you.  Getting an
	strace is easy, just type <userinput>strace -o &lt;output
	file&gt; &lt;command with args&gt;</userinput> into an xterm.
	For example, to do an strace on the gtalk program with sound
	disabled, I might do <userinput>strace -o /tmp/gtalk.strace
	gtalk --disable-sound</userinput>.  This will save the strace
	output in <filename>/tmp/gtalk.strace</filename>.  Strace does
	make use of the path, and does accept program arguments on the
	command line.</para>

	<para>Warning, strace produces lots of output (the above
	strace example came up with 5,498 lines in five seconds).
	Don't send straces to the mailing lists, and only send them to
	the developers if they specifically request it.</para>

	<para>On Solaris systems, the <command>strace</command>
	command does something different.  The
	<command>truss</command> command is probably what the person
	who asked for the strace is looking for.</para>
      </sect2>
    </sect1>

    <sect1 id="CompileHelp">
      <title>Specific Compile Problems</title>

      <sect2 id="zlib">
	<title>What does <computeroutput>undefined reference to
	'compress'</computeroutput> mean?</title>

	<para>In general, it means that it is having trouble finding
	or linking to the compression library (libz).  First, make
	sure it is installed.  If it isn't, then find it and install
	it.  It should be included in all major Unixes and Unix-like
	systems.</para>

	<para>If it is installed properly, and you still get the
	error, than check to see if there are any other copies of libz
	floating around.  One place where it often is hiding when
	people have problems is in
	<filename>/usr/X11R6/lib</filename>, since XFree86 puts a copy
	there.  It is probably safe to just delete it, but if you
	aren't sure, rename it to something like
	<filename>libz.so.renamed</filename>, that way it won't be
	found by the linker, and if you run into problems elsewhere
	because of the renaming, you can just rename it back.</para>
      </sect2>

      <sect2>
	<title>What is <computeroutput>AC_TRY_RUN</computeroutput>,
	and why is my machine warning me about it?</title>

	<para>Sometimes, when running aclocal, autogen.sh or make, you
	will get lines looking like: <computeroutput>configure.in:171:
	warning: AC_TRY_RUN called without default to allow cross
	compiling</computeroutput>.  This is nothing to be alarmed
	about, you can safely ignore it (unless you are cross
	compiling).</para>

	<para>If you're still curious, a cross compiler is a compiler
	based on one platform that you can use to create code to run
	on a different platform.  For example, some people have a
	version of GCC installed on GNU/Linux boxes with Intel
	processors which makes binaries for SGI boxes with MIPS
	processors.  This would be a cross compiler.</para>

	<para>The AC_TRY_RUN macro is called to attempt to compile and
	run a code fragment.  It is used to test to see whether a
	particular piece of code is likely to work on your machine or
	not, and adjust the configuration accordingly.  If you are
	cross-compiling, however, you can't run the code fragment,
	since it's on a different machine than the one you are on.
	The AC_TRY_RUN macro includes a parameter to tell it what to
	do in this case, but we haven't tested cross-compiling GNOME
	yet, so it would be premature to configure this value.
	Because the value is absent, it gives the warning.</para>
      </sect2>

      <sect2 id="db185">
	<title>While compiling the program
	<filename>gnome-gen-mimedb</filename> segfaults</title>

	<para>This means you have a broken db 1.85 package, please
	upgrade your db library</para>
      </sect2>
    </sect1>

    <sect1 id="RuntimeHelp">
      <title>Runtime Problems</title>

      <sect2 id="ResetSM">
	<title>How do I reset my session management settings?</title>

	<para>Many people find session management very useful.
	However, sometimes session management can go astray, and do
	undesired things like remember your settings after your kid
	brother attacked your computer.  If GNOME is properly
	installed, returning your settings to the default is
	easy.</para>

	<para>First, exit completely out of X.  If you are using
	session management, you should be able to use the
	<guimenuitem>Log out</guimenuitem> item of the Foot menu to
	exit.  If that doesn't work, hold down the control and alt
	keys, and hit backspace.  If that still doesn't work, and you
	are now looking at an XDM or GDM login prompt, switch to a
	text login (control-alt-F1 on many systems, consult your
	system documentation if you aren't sure, log in as a different
	user and use <command>su</command> in an xterm if you are
	really in a bind).</para>

	<para>Then, to remove your settings, while you are out of X,
	remove the <filename>~/.gnome/session</filename> file.  The
	next time you start X, or the next time you log in from GDM,
	it should start you with the default window manager, panel,
	gmc and the help browser.</para>
      </sect2>

      <sect2>
	<title>I started GNOME with session management, why am I just
	getting this grey screen (no panel, nothing)?</title>

	<para>If you use session management, and it can't find a
	session, this is what it gets.  First, have you tried
	resetting your session management settings (See <link
	linkend="ResetSM">above</link>)?  If this doesn't fix it, than
	<command>gnome-session</command> is having trouble finding the
	<filename>default.session</filename> file.  In gnome-core
	versions 1.03 and later the file should be in
	<filename>$prefix/share/gnome</filename>.  Prior to that it
	should be in <filename>$prefix/share</filename>.  If the file
	is missing, you should probably reinstall gnome-core.</para>
      </sect2>

      <sect2>
	<title>How do I tell session management what window manager to
	use?</title>

	<para>This is a tougher question than it sounds, since the
	answer depends on which version of GNOME you are running.  The
	easy answer is to use the Window Manager settings in
	<command>control-center</command>.  If that doesn't work for
	you for some reason, here's how to do it.</para>

	<para>In gnome-core version 1.03 and earlier, the window
	manager is selected by placing it in a file called
	<filename>default.wm</filename>.  The system default for this
	file should be in either the
	<filename>$prefix/share/gnome</filename> or
	<filename>$prefix/share</filename> directories, whichever one
	has the file <filename>default.session</filename>.</para>
	
	<para>A user-specific version of
	<filename>default.wm</filename> can be put in the
	<filename>~/.gnome</filename> directory.  The
	<filename>default.wm</filename> file should look like:</para>

	<screen>
[Default]
WM=foo</screen>

	<para>Where <userinput>foo</userinput> should be replaced by
	the window manager you want.  If you want to change the system
	default, you might also have to change the
	<filename>default.session</filename> file.</para>

	<para>In gnome-core versions 1.04 and later, it is much
	easier.  Set the environment variable
	<envar>WINDOW_MANAGER</envar> to the window manager you want,
	then start X.  If that variable is not set, GNOME will run a
	script to make a good guess as to your window manager.  You
	can also edit the <filename>~/.gnome/default.wm</filename>
	file as in older versions.</para>
      </sect2>

      <sect2 id="BlackIcon">
	<title>Everything seems to be working, but most of my icons are
	just black squares, or random spots.  How do I get my
	icons?</title>

	<para>Most of GNOME's icons are <ulink url="&wwwpng;">
	PNG</ulink> format graphic images, displayed via libpng and
	the Imlib graphics library.  The trouble is, this part of
	Imlib seems to be very finicky, and it shows its displeasure
	by displaying garbage (the black squares are just cleaner
	garbage).</para>

	<para>There are a few things that can cause this to happen.
	The most common problem is a bad, missing or confused libpng.
	If you have libpng version 1.0.2, assume it is bad.  Only use
	versions 1.0.1, 1.0.3 or later.  Missing is easy, if there is
	no file called "libpng.so" or "libpng.so.2", and you are on a
	system with dynamic libraries, it's missing, get a copy and
	install it.  To see if it's confused, see if you have more
	than one copy of "libpng.so" or "libpng.so.2", if you do,
	remove them all and reinstall the right one.</para>

	<para>Another possibility is one I have on one of my machines
	(A RedHat box with an AMD5x86 processor and egcs).  If I
	use any optimization when I compile glib or imlib, I get the
	problem described (imlib uses the gmodule portion of glib to
	load the PNG code).  Try compiling those two packages with no
	optimization switches on.  That might fix it.  As far as I can
	tell, this is a bug in my compiler, not in GNOME.</para>

	<para>I have also received a report that the problem could
	occur from interference from some versions of ImageMagick.  If
	you are at a loss, you might want to try removing or upgrading
	it.</para>
      </sect2>
    </sect1>
  </chapter>

  <chapter id="Architecture">
    <title>Architecture Components</title>

    <para>This section discusses the various pieces of GNOME, and what
    they do.</para>

    <sect1 id="ArchLibraries">
      <title>Libraries</title>
      <sect2>
	<title>Why do I need so many libraries
	for GNOME?</title>

	<para>GNOME requires the libraries it does for two big
	reasons.  We wanted GNOME to have lots of useful features, and
	we didn't want to write everything from scratch.  By using
	common libraries for many of GNOME's features it allows GNOME
	to work better and more consistently with other non-GNOME
	applications.</para>
      </sect2>
    </sect1>

    <sect1 ID="CORBA">
      <title>CORBA, ORBit and Bonobo</title>

      <para>Network Objects is GNOME's middle name.  This is how they
      work.</para>

      <sect2>
	<title>What is CORBA?</title>

	<para><ulink
	url="http://www.omg.org/news/begin.htm">CORBA</ulink> is the
	Common Object Request Broker Architecture.  From the Open
	Management Group (OMG, the standards body which controls
	CORBA) document <ulink
	url="http://www.omg.org/about/wicorba.htm">What is
	CORBA?</ulink> comes the following description:</para>

        <blockquote>
	  <para>The Common Object Request Broker Architecture (CORBA),
	  is the Object Management Group's answer to the need for
	  inter-operability among the rapidly proliferating number of
	  hardware and software products available today. Simply
	  stated, CORBA allows applications to communicate with one
	  another no matter where they are located or who has designed
	  them(...)</para>

	  <para>The (ORB) is the middleware that establishes the
	  client-server relationships between objects. Using an ORB, a
	  client can transparently invoke a method on a server object,
	  which can be on the same machine or across a network. The
	  ORB intercepts the call and is responsible for finding an
	  object that can implement the request, pass it the
	  parameters, invoke its method, and return the results. The
	  client does not have to be aware of where the object is
	  located, its programming language, its operating system, or
	  any other system aspects that are not part of an object's
	  interface. In so doing, the ORB provides inter-operability
	  between applications on different machines in heterogeneous
	  distributed environments and seamlessly interconnects
	  multiple object systems.</para>

	  <para>In fielding typical client/server applications,
	  developers use their own design or a recognized standard to
	  define the protocol to be used between the devices. Protocol
	  definition depends on the implementation language, network
	  transport and a dozen other factors. ORBs simplify this
	  process. With an ORB, the protocol is defined through the
	  application interfaces via a single implementation
	  language-independent specification, the IDL (Ed. Interface
	  Description Language).  And ORBs provide flexibility. They
	  let programmers choose the most appropriate operating
	  system, execution environment and even programming language
	  to use for each component of a system under
	  construction. More importantly, they allow the integration
	  of existing components. In an ORB-based solution, developers
	  simply model the legacy component using the same IDL they
	  use for creating new objects, then write "wrapper" code that
	  translates between the standardized bus and the legacy
	  interfaces.</para>
	</blockquote>

	<para>OK, enough of that stuff. Here's Todd's
	explanation:</para>

	<blockquote>
	  <para>Do you remember RPC? You know, Remote Procedure Calls?
	  Sun used them as the basis for NFS and NIS. Microsoft used
	  the Distributed Computing Environment's RPC standard as the
	  basis for DCOM.</para>

	  <para>Well, a remote procedure call is really pretty
	  simple. First, you define the procedure in some standard
	  format. What is there to a procedure definition?  Well,
	  you've got the name of the procedure, the arguments which go
	  into it, and the results which come out of it. Then you
	  produce the client side, which tells clients how to feed in
	  arguments and get back results, and then you build the
	  server side, which takes in arguments and gives back
	  results.</para>

	  <para>You can use this model to build pretty powerful
	  systems. Just take the standard Unix file system interface,
	  convert it to RPC, and bammo, you've got NFS. Note that as
	  long as the inputs and outputs are thrown around in a
	  standard way, the clients calling the procedure and the
	  server servicing the procedure don't have to be written in
	  the same language, running on the same machine, or even
	  running on the same operating system or hardware. This is,
	  truth be told, the killer feature of RPC.</para>

	  <para>However, as procedural programming (C, Perl) has been
	  superseded by object-oriented programming (Objective C,
	  Java, C++), you really need something more the procedures in
	  RPC. You need something which supports objects: creating
	  objects, accessing object data, accessing object methods,
	  destroying objects. This is where CORBA comes in: think of
	  CORBA as next-generation RPC, just extended to support
	  object-oriented programming. Instead of having under RPC the
	  following:</para>

	  <programlisting>void foo(int bar); void baz(){return(-1);}</programlisting>

	  <para>you instead have under CORBA the following:</para>

	  <programlisting>interface bubba{ void foo(in int bar); void baz() raises (InValidContext); } </programlisting>

	  <para>The lesson of all of this? CORBA lets one program
	  language-independent, location-transparent object-oriented
	  interfaces between software components. It' s cool.</para>

	</blockquote>
      </sect2>

      <sect2>
	<title>What are some CORBA components?</title>

	<para>I would like to include here definitions of some of the
	more strange CORBA terminology, so that people can easily get
	into the groove of what CORBA is and have a good
	"beck-of-the-envelope" understanding of the components
	involved.  Whenever I refer to a non-obvious CORBA term, I
	intend to define it here.</para>
	<itemizedlist>
	  <listitem>
	    <para><firstterm>Object Request Broker</firstterm> - (or
	    ORB) an ORB is a piece of "middleware", as it's called,
	    which sits between clients and servers and makes easy
	    communication between them possible. The ORB is a
	    conceptual entity, which sometimes takes the form of a
	    shared library and sometimes takes the form of an external
	    program.  the ORB is responsible for establishing and
	    destroying sessions between clients and servers and
	    marshaling, unmarshaling, and transporting messages
	    between them during a session.</para>
	  </listitem>
	  <listitem>
	    <para><firstterm>Object Adaptor</firstterm> - (or OA) an
	    Object Adaptor provides the channel through which an
	    object server (like the gnome panel) communicates with the
	    Object Request Broker (ORBit).</para>
	  </listitem>
	  <listitem>
	    <para><firstterm>GIOP/IIOP</firstterm> - CORBA takes all
	    of these object-oriented language-isms and handles
	    carrying them between object-oriented software components
	    (marshaling, transporting, and demarshaling). If the two
	    pieces of software are in different locations, then it
	    will use the GIOP protocol to move information between
	    them. IIOP is a specification of GIOP for the Internet
	    protocol suite; theoretically you could run GIOP over
	    something other than IP, in which case it would be called
	    something else. I for one can't figure out why you would
	    want to. 8^) If any version of GIOP other than IIOP ever
	    became important, then I'm sure that ORBit would support
	    it, too. (Think of IIOP as HTML to GIOP's SGML.)</para>
	  </listitem>
	</itemizedlist>
      </sect2>

      <sect2>
	<title>What are CORBA Services?</title>

	<para>Additionally, there are really two parts to CORBA. There
	is the part which I've already described, which tells you how
	to do objectified RPC, how to marshal arguments, how to write
	IDL files, how GIOP works, etc. and then there are the "CORBA
	Services". These are services built on top of the basic CORBA
	infrastructure which make distributed object programming
	easier.</para>

	<para>Perhaps the most important of these is the naming
	service. E.g., say that you were a program which for some
	reason needed spell-checking services. One really neat thing
	that you can do (if your CORBA implementation is nifty enough)
	is to call up your ORB and say "Hey! I need spell-check
	service. Go find it for me." The ORB then uses the naming
	service to see what objects are registered which provide
	spell-check service. It can then wake up the calling program
	and say "You can find the spell- check service at
	&num;867-5309." You then call up 867-5309 and, lo and behold,
	there's a spell check service there. Now, that might be a
	shared library which got mapped into your address space and
	you are now doing straight function calls into it, or it might
	be a community spell-check service in Mongolia offered as a
	public service by the Mongolian FreeBSD users' group over the
	internet via IIOP. You don't know and, except for maybe a
	little lag induced by the round-trip to Mongolia, you really
	don't care. Cool, non?</para>

	<para>The naming service, then, allows objects to register
	themselves for future use. There are other CORBA services,
	including a transaction service, a security service, a time
	service, a "relationship service", which might or might not be
	what you think it is, and more. My copy of the CORBAservices
	document from March 1997 lists 14 of them.</para>

	<para>You can find a copy of the CORBAservices specification
	at the OMG web page at <ulink
	url="http://www.omg.org/corba/csindx.htm">http://www.omg.org/corba/csindx.htm</ulink>.
	If you are interested in implementing any of them, then I'm
	sure that the ORBit developers would love to talk to you.
	(See <link linkend="ORBIT">ORBit</link>)</para>
      </sect2>

      <sect2>
	<title>Which CORBA version does GNOME use?</title>

	<para>Work is presently underway within the OMG to develop
	version 3.0, but for now GNOME is using CORBA version 2.2,
	which is the present standard. I have not heard what GNOME
	will do when 3.0 comes out.</para>
      </sect2>

      <sect2>
	<title>Where can I find out more about CORBA?</title>

	<para>A good jumping-off page is Linas Vepstas's CORBA page at
        <ulink url="http://linas.org/linux/corba.html">
        http://linas.org/linux/corba.html</ulink>.</para>

	<para>Since there seems to be a lot of interest in the
	difference between CORBA and COM, I'll just mention this one
	other paper: <ulink url="&dcomcorba;">&dcomcorba;</ulink>,
	DCOM and CORBA Side by Side, Step by Step, and Layer by
	Layer.</para>

	<para>Finally, the TAO project at Washington University in
	St. Louis has their own ORB, TAO. That group is led by
	Dr. Douglas Schmidt. You can find a lot of good information on
	his CORBA page: <ulink
	url="&schmidtcorba;">&schmidtcorba;</ulink>.  Be sure to look
	around at the ACE and TAO pages while you're there; they are
	very good.</para>
      </sect2>

      <sect2>
	<title>What role does CORBA play in GNOME?</title>

	<para>CORBA enables the component architecture of GNOME. It
	serves a role similar to that of COM/DCOM under win32.</para>
      </sect2>

      <sect2>
	<title>What CORBA implementation is GNOME using?</title>

	<para>In the beginning, the plan was to use <ulink
	url="ftp://parcftp.parc.xerox.com/pub/ilu/ilu.html">
	ILU</ulink>.  ILU had a number of benefits, foremost among
	them that it supports several languages.  While ILU was (and
	is) awfully neat, Xerox's attitude towards it was unclear, and
	the licensing terms proved to be fatal: ILU is not free
	software, and the GNOME team proved unable to get Xerox to
	modify the license. The GNOME project won't adopt technology
	which is not free software, and that was the end of
	that.</para>

	<para>The project then settled upon <ulink
	url="http://diamant-atm.vsb.cs.uni-frankfurt.de/~mico/">
	MICO</ulink>.  The main attractions of MICO are that it has an
	Object Adaptor, it is IIOP-compliant, and it is licensed under
	the terms of the GPL. However, it does not presently support
	languages other than C++, and it used just an unbelievably
	amount of memory.</para>

	<para>Still dissatisfied, the GNOMErs began work on our own
	ORB, called ORBit.</para>
      </sect2>

      <sect2 id="ORBit">
	<title>What is ORBit?</title>

	<para>ORBit is intended to be multilingual; ILU proves that
	this is possible.  Right now it only supports C, but in the
	future it will support other languages.  (Really, we mean it!
	It is a very, very new project right now, which is the only
	reason it is C only.) It also supports GIOP/IIOP, the OMG's
	CORBA protocol which allows different ORBs to be able to talk
	to each other.</para>

	<para>Finally, ORBit is intended to be high performance. That
	means low-memory and high-speed. Here, ORBit is taking a lot
	of cues from <ulink
	url="http://www.cs.utah.edu/projects/flux/flick/">
	Flick</ulink>.  Elliot Lee, the instigator of the ORBit
	project, thinks that he can, without violating the CORBA spec,
	get the cost of a CORBA call darn close to that of a standard
	library call, where a local implementation of the requested
	service is available. We'll see.</para>
      </sect2>

      <sect2>
	<title>Why has GNOME not made more use of CORBA?</title>

	<para>The big reason is that MICO was just unworkable. it took
	too much memory, it was C++ only, etc. ad naus. With the
	recent release of the GNOME ORBit, we can start deploying
	CORBA in the GNOME.</para>
      </sect2>

      <sect2 id="Bonobo">
	<title>How will CORBA be used in GNOME, or, what is
	Bonobo?</title>

	<para>(This section comes pretty much verbatim from Miguel de
	Icaza, Chief of the GNOMErs.)</para>

	<para>CORBA will be used in various contexts. A set of
	interfaces and library routines called "Bonobo" are used to
	simplify and integrate applications:</para>

	<itemizedlist>
	  <listitem>
	    <para>Components: There are pre-packaged libraries/servers
	    that do provide some functionality that can be used by any
	    application like spelling servers, calendaring services
	    and other non-GUI services.</para>
	  </listitem>

	  <listitem>
	    <para>Application embedding and in-place activation:
	    Bonobo is a set of interfaces for providing application
	    embedding and in-place activation which are being defined.
	    The Bonobo interfaces and interactions are modeled after
	    the OLE2 and OpenDoc interfaces.</para>
	  </listitem>

	  <listitem>
	    <para>GNOME Applications as service providers: GNOME
	    applications will export their inner workings through
	    CORBA to allow anyone to reuse their functionality.  This
	    allows scripting of the GNOME desktop as any CORBA-aware
	    application or scripting language can invoke methods in a
	    GNOME server (for example, a script in Perl can control
	    remotely invoke a spreadsheet to make a graph or to make a
	    sales report). Some people call this "Automation".  Unlike
	    the COM world, the use of CORBA makes this transparent to
	    the implementor of a server.</para>
	  </listitem>

	  <listitem>
	    <para>Reusable controls: Another set of Bonobo interfaces
	    deal with reusable controls. This is similar to Sun's
	    JavaBeans and Microsoft Active-X.</para>
	  </listitem>

	</itemizedlist>

	<para>Bonobo doesn't stand for anything.  They are
	Chimpanzees' less grouchy cousins.</para>
      </sect2>
    </sect1>

    <sect1 id="Graphics">
      <title>Graphics in GNOME</title>

      <sect2 id="GTK">
	<title>What is GTK+?</title>

	<para>GTK+ is the Gimp Toolkit.  It was originally written as
	part of the Gimp project, but it has grown into an excellent
	general purpose widget set.  Find out more at <ulink
	url="&wwwgtk;">&wwwgtk;</ulink></para>
      </sect2>

      <sect2>
	<title>What role does GTK+ play in GNOME?</title>

	<para>GTK+ is the interface which GNOME applications use to
	interact with the user. It is similar to the role of Motif in
	CDE, Qt in KDE or the-widget-set-which-has-no-name in
	Win32.</para>
      </sect2>

      <sect2>
	<title>What languages does GTK+ support?</title>

	<para>You can write GTK+ programs in tons of languages! Your
	humble FAQ author knows of the following bindings:</para>
	<simplelist>
	  <member>C (original)</member>
	  <member>C++</member>
	  <member>Objective C</member>
	  <member>Python</member>
	  <member>Perl 5</member>
	  <member>Scheme (Guile)</member>
	  <member>TOM</member>
	  <member>Gwydion Dylan</member>
	  <member>Ada95</member>
	  <member>Pike</member>
	  <member>Pascal (Free Pascal Compiler)</member>
	</simplelist>

	<para>If there are others, then please let us know about
	them. (See <link linkend="ContactFAQ">Contact the FAQ
	Maintainer</link>)</para>

	<para>You are encouraged to add bindings to other languages
	should the fancy strike you. N.b., that the Scheme bindings
	already have a formalized representation of the API, so if you
	want to start working on new bindings, then you might want to
	start from here.</para>

	<para>Having written that, I have to wonder if we can't
	somehow use CORBA to cut this Gordian knot. If the ORBit
	developers can get the cost of a local CORBA call down to that
	of a normal shared-library call, then why not CORBify GTK and
	work on adding bindings for new languages to ORBit? I know,
	the conventional wisdom is that CORBA is too heavyweight for
	high-volume stuff like X calls.  Hey, don't blame me for
	throwing out crazy ideas: the reason I maintain the FAQ is
	that I can't program!</para>
      </sect2>

      <sect2 id="Imlib">
	<title>What is imlib?</title>

	<para>Along with GTK, GNOME uses imlib, an image library for X
	which supports multiple image formats transparently to the
	programmer. Imlib can even use external converter programs
	like ImageMagick or pmbplus to convert unknown image formats
	to known formats, so if a converter exists for an image type,
	you can almost certainly use that image type in your
	application! Imlib also supports multiple bit-depths, from
	24-bit down to 1-bit monochrome, again transparently to the
	programmer, and does intelligent color map allocation and
	automatic dithering to get the best possible performance out
	of your display. Anyone who has ever tried to do this in their
	X apps, or who has had to endure their screen flashing when
	apps have to allocate a private color map, you will especially
	like this feature.</para>

	<para>You can find out more about imlib at <ulink
        url="&wwwimlib;">&wwwimlib;</ulink>.</para>
      </sect2>

      <sect2 id="Themes">
	<title>What's the deal with themes?</title>

	<para>Themes let you change the look and feel of GTK+
	applications without recompiling them.  With themes, you are
	able to change the theme of all GTK+ apps on a given display
	at the same time.</para>

	<para>There are actually two parts of a theme in GTK+, the
	engine and the configuration.  The engine is a specially
	constructed shared library with instructions on the themes way
	to draw the widgets (the controls of a window, like the
	buttons, scrollbars and menus).  The configuration includes
	information like fonts, colors, which engine to use, and
	sometimes graphic images to incorporate into the theme.
	Together, the two make the Theme, and give GTK+ its flexible
	appearance.</para>

	<para>To see some examples of what themed GTK+ apps look like,
	take a look at: <ulink url="&wwwgtktheme;">
	&wwwgtktheme;</ulink>.</para>
      </sect2>

      <sect2>
	<title>How do I get themes working?</title>

	<para>First, you need a recent version of GTK+, I recommend
	version 1.2.1 at the moment, but 1.2.0 works fine as well.
	You then get the themes you want.  A good selection of themes
	is available in the gtk-engines module.  Even more are
	available at <ulink url="&wwwgtktheme;">
	&wwwgtktheme;</ulink>.</para>

	<para>Many of the themes include an engine.  You need to
	compile the engine, and install it.  In gtk-engines, this is
	done the same way as any GNOME module.  The themes from the
	website might have different instructions, check their
	documentation.  Some of the themes on the website are merely
	alternate configurations for another engine, many of them are
	for the pixmap engine in gtk-engines.</para>

	<para>Once the theme is installed, you can select them through
	the GNOME Control Center, under Desktop->Theme Selector.  The
	selector will allow you to choose between all the themes
	installed on the fly, preview what the the theme will look
	like, and in version 1.04 or later even let you select the
	font.</para>

	<comment> You can see what the FAQ author's themefied GTK apps
        look like at: <ulink url="&wwwtoddtheme;">
        &wwwtoddtheme;</ulink>. Commented out due to dead
        link.</comment>
      </sect2>

      <sect2 id="OpenGL">
	<title>What is OpenGL?</title>

	<para>OpenGL is a 2D and 3D rendering API developed by Silicon
	Graphics that has become a de facto industry standard.
	Basically, it is a tool to take a viewpoint of 3D space, and
	produce a 2D image of it suitable for drawing on a screen. To
	quote SGI's FAQ:</para>

	<blockquote>
	  <para>OpenGL is a rendering only, vendor neutral API
	  providing 2D and 3D graphics functions, including modeling,
	  transformations, color, lighting, smooth shading, as well as
	  advanced features like texture mapping, NURBS, fog, alpha
	  blending and motion blur. OpenGL works in both immediate and
	  retained (display list) graphics modes.</para>
	</blockquote>

	<para>GNOME uses an implementation of the OpenGL API called
	Mesa.  Mesa is not OpenGL per se, since it is a Free Software
	project that has not gone through the OpenGL trademark
	licensing process, but it is a faithful representation of the
	OpenGL API.  Mesa is not OpenGL(tm) in precisely the same way
	that GNU/Linux and FreeBSD are not Unix(tm).</para>
      </sect2>

      <sect2 id="XDND">
	<title>What about Drag and Drop support?</title>

	<para>GNOME currently uses the Xde Drag and Drop protocol. XDE
	is being replaced with an implementation of the X Windows
	Drag-And-Drop Protocol to inter-operate with other toolkits.
	Find out more at <ulink url="&wwwxdnd;">
	&wwwxdnd;</ulink>.</para>
      </sect2>
    </sect1>

    <sect1 id="SM">
      <title>Session Management</title>

      <sect2>
	<title>What is session management?</title>

	<para>Session Management is an extension to the X Window
	system which allows applications to save and restore their
	state. This allows users to have their desktop look like they
	left it, rather than having a clean desktop every time they
	re-enter the GNOMosphere.</para>
      </sect2>

      <sect2>
	<title>How do I use session management in my GNOME
	application?</title>

	<para>Dr. Mike of RedHat has written a tutorial on this:
	<ulink url="http://www.gnome.org/devel/start/sm.shtml">
        http://www.gnome.org/devel/start/sm.shtml</ulink>.</para>
      </sect2>
    </sect1>

    <sect1 id="Docbook">
      <title>DocBook</title>
      <sect2>
	<title>What is DocBook?</title>

	<para>DocBook is a SGML DTD (a set of tags for a text file)
	that is very useful for writing documentation.  Most of the
	GNOME documentation is written in DocBook.  To find out more,
	look at Oasis's DocBook pages at <ulink
	url="&wwwdocbook;">&wwwdocbook;</ulink>.  There is also a good
	tutorial for DocBook at <ulink
	url="&wwwdocbooktut;">&wwwdocbooktut;</ulink>.</para>

	<para>The version of DocBook, and related tools, as used by
	GNOME can be found at <ulink
	url="&ftpdocware;">&ftpdocware;</ulink>.  Tarballs and binary
	RPMs are both available there.</para>
      </sect2>

      <sect2 id="SGML">
	<title>What is SGML?</title>

	<para>To be filled in.</para>
      </sect2>
    </sect1>

    <sect1 id="I18N">
      <title>Internationalization & Localization (I18N & L10N)</title>
      <sect2>
	<title>What are Internationalization(I18N) and
	Localization(L10N)?</title>

	<para>From the GNU gettext info page:</para>

	<para>By <firstterm>internationalization</firstterm>, one
	refers to the operation by which a program, or a set of
	programs turned into a package, is made aware and able to
	support multiple languages. This is a generalization process,
	by which the programs are untied from using only English
	strings or other English specific habits, and connected to
	generic ways of doing the same, instead. Program developers
	may use various techniques to internationalize their programs,
	some of them have been standardized. GNU gettext offers one of
	these standards.</para>

	<para>By <firstterm>localization</firstterm>, one means the
	operation by which, in a set of programs already
	internationalized, one gives the program all needed
	information so that it can bend itself to handle its input and
	output in a fashion which is correct for some native language
	and cultural habits. This is a particularisation process, by
	which generic methods already implemented in an
	internationalized program are used in specific ways. The
	programming environment puts several functions to the
	programmers disposal which allow this runtime
	configuration. The formal description of specific set of
	cultural habits for some country, together with all associated
	translations targeted to the same native language, is called
	the locale for this language or country. Users achieve
	localization of programs by setting proper values to special
	environment variables, prior to executing those programs,
	identifying which locale should be used.</para>
      </sect2>

      <sect2>
	<title>What I8N and L10N API does GNOME use?</title>

	<para>GNOME uses the Uniforum's internationalization
	standard. This is the "standard" invented by Sun Microsystems
	and adopted by the GNU project in their "gettext"
	package. N.b., this is different from the competing X/Open
	standard.</para>
      </sect2>

      <sect2>
	<title>How do I program using I18N and L10N, or Where do I
	find out more info on these topics?</title>

	<para>Take a look at the GNU gettext package's online manual
        at <ulink url="&wwwgettext;">&wwwgettext;</ulink>.  There also
        is a very useful article from Linux Journal about
        internationalization issues at <ulink
        url="&wwwlj;/issue59/3286.html">
        &wwwlj;/issue59/3286.html</ulink>.  Additionally, you may find
        the I18N FAQ informative: <ulink
        url="&wwwi18n;">&wwwi18n;</ulink>.</para>
      </sect2>

      <sect2>
	<title>How do I change the language of my GNOME
	programs?</title>

	<para>To change the language that GNOME programs use, you just
	need to set the environment variable <envar>LANG</envar> to
	the desired ISO 639 language code.  From that point forward,
	any new GNOME apps you run will try use that language.</para>

	<para>Let's say you wanted to see GNOME in Spanish.  In the
	Bourne Shell and its derivatives (such as Bash), you use
	<command>set LANG="es"</command>.  If you were using the C
	Shell (or tcsh), you would use <command>setenv LANG
	"es"</command> instead.  These commands are generally put in
	the <filename>.profile</filename> or
	<filename>.login</filename> file, so that your environment
	starts up the same way each time.</para>

	<para>Some languages (such as English and Spanish) need to be
	handled differently depending on where you are.  In these
	cases you can extend the language code with an underscore
	followed by a ISO 3166 country code.  So, if you want to
	select British English you would use "en_GB"; for Mexican
	Spanish you would use "es_MX".</para>

	<para>Keep in mind that GNOME apps that are already running
	won't change languages while you change the
	<envar>LANG</envar> variable, you have to close the program
	and reopen it for the new value to take effect.  Also note
	that some languages are not offered by all applications.  You
	might find some apps using the language you want, and others
	using English.</para>

	<para>You can find the list of all the ISO Language and
	Country Codes at <ulink
	url="&wwwicodes;">&wwwicodes;</ulink>.  Here's the list of the
	codes currently supported by GNOME-core:</para>
	<simplelist>
	  <member>Catalan (ca)</member>
	  <member>Czech (cs)</member>
	  <member>Danish (da)</member>
	  <member>German (de)</member>
	  <member>English [USA] (en) [Yeah, life's not fair]</member>
	  <member>English [Great Britain] (en_GB)</member>
	  <member>Spanish [Spain] (es)</member>
	  <member>Spanish [Dominican Republic] (es_DO)</member>
	  <member>Spanish [Guatemala] (es_GT)</member>
	  <member>Spanish [Honduras] (es_HN)</member>
	  <member>Spanish [Mexico] (es_MX)</member>
	  <member>Spanish [Panama] (es_PA)</member>
	  <member>Spanish [Peru] (es_PE)</member>
	  <member>Spanish [Sweden?] (es_SV) [Should be es_SE if its Sweden]</member>
	  <member>Basque (eu)</member>
	  <member>Finnish (fi)</member>
	  <member>French (fr)</member>
	  <member>Irish (ga)</member>
	  <member>Hungarian (hu)</member>
	  <member>Italian (it)</member>
	  <member>Japanese (ja)</member>
	  <member>Korean (ko)</member>
	  <member>Dutch (nl)</member>
	  <member>Norwegian (no)</member>
	  <member>Polish (pl)</member>
	  <member>Portuguese (pt)</member>
	  <member>Russian (ru)</member>
	  <member>Slovak (sk)</member>
	  <member>Swedish (sv)</member>
	  <member>Waloon (wa)</member>
	</simplelist>
      </sect2>
    </sect1>

    <sect1 id="Guile">
      <title>Guile</title>

      <sect2>
	<title>What is Guile?</title>

	<para>Guile is the GNU project's implementation of Scheme, a
	Lisp dialect.  Find out more at <ulink
	url="&wwwguile;">&wwwguile;</ulink>.  There's also some
	excellent information at <ulink url="&wwwredbean;">
	&wwwredbean;</ulink></para>

	<para>The Guile docs are pretty good, but the Scheme standard
	(the wonderfully, obscurely named R5RS) can be found at:
	<ulink url="&wwwschemerpt;">&wwwschemerpt;</ulink>.</para>
      </sect2>

      <sect2>
	<title>What role does Guile play in GNOME?</title>

	<para>Guile is the scripting or "glue" language for the GNOME
	project. From the original announcement:</para>

	<blockquote>
	  <para>We plan to use GTK/Scheme bindings for coding small
	  utilities and applications. When these bindings are more
	  mature, it should be possible to write complete applications
	  in Scheme.</para>
	</blockquote>
      </sect2>
    </sect1>
  </chapter>

  <chapter id="DevelopingGNOME">
    <title>Developer Issues</title>

    <sect1 id="WMCompliance">
      <title>What does a window manager have to do to be
      GNOME-compliant</title>

      <para>There are three big things:</para>
      <itemizedlist>
	<listitem>
	  <para>It must be fully ICCCM compliant, especially with
	  proper X Session Management support.</para>
	</listitem>
	<listitem>
	  <para>It must support MWM hints.</para>
	</listitem>
	<listitem>
	  <para>It must support GNOME hints.</para>
	</listitem>
      </itemizedlist>
      <para>For more detailed information, see the GNOME Window
      Manager Compliance page at <ulink url="&wwwgnomewmc;">
      &wwwgnomewmc;</ulink></para>
    </sect1>

    <sect1 id="Autoconf">
      <title>What is Autoconf? What does it have to do with
      GNOME?</title>

      <para>Autoconf is a tool for producing shell scripts that
      automatically configure source code to adapt to the system you
      are using.  Autoconf is invaluable, since it makes the
      development of such configure scripts drastically easier. GNOME
      uses it alongside the related tool, Automake, which allows
      Autoconf to produce custom Makefiles for your system.  Autoconf
      uses m4 to operate.  M4 is a powerful (but arcane) macro
      language used by many GNU utilities.  Most of the macros used to
      generate these files are found in either
      <filename>/usr/share/aclocal</filename> or the
      <filename>macros</filename> subdirectory of the source tree.</para>

      <para>If you are using the tarballs, Autoconf and Automake have
      already been run for you, so you don't need them on your system.
      If you use CVS, you won't get very far without having recent
      versions of these tools.  You can find more information about
      Autoconf at <ulink url="&wwwgnuaconf;"> &wwwgnuaconf;</ulink>,
      and Automake at <ulink url="&wwwgnuamake;">
      &wwwgnuamake;</ulink>.</para>

      <para>Keep in mind, that <filename>configure</filename>,
      <filename>config.h</filename>, <filename>Makefile</filename>,
      and even <filename>Makefile.in</filename> are all constructed
      files.  If you need to change them, you shouldn't patch them
      directly, but rather modify the files used to create them:
      <filename>configure.in</filename>,
      <filename>config.h.in</filename>, and
      <filename>Makefile.am</filename>.</para>
    </sect1>

    <sect1 id="Libtool">
      <title>What is Libtool?  What does it have to do with
      GNOME?</title>

      <para>Libtool is an important portability utility.  It gives a
      common interface to the mechanics of building, debugging and
      maintaining static and dynamic libraries on most computer
      systems in use.  It works in three phases, the
      <command>libtoolize</command> command adds libtool support to a source
      tree by adding the <command>ltconfig</command> script.  This
      script, in turn, generates a system-specific script called
      <command>libtool</command> in the source tree.  The
      <command>libtool</command> script is the part that actually gets
      all the work done.</para>

      <para>Like Autoconf and Automake, if you are using CVS, you need
      Libtool installed on your system.  If you use the tarballs,
      <command>libtoolize</command> as already been run, and
      <command>ltconfig</command> is self-contained, so you do not
      need Libtool to be installed.  More information about libtool
      can be found at <ulink url="&wwwgnulibtool;">
      &wwwgnulibtool;</ulink></para>
    </sect1>
  </chapter>

  <chapter id="GNOMEr">
    <title>Becoming a GNOMEr</title>

    <para>General information on getting more involved with the GNOME
    Project.</para>

    <sect1>
      <title>How do I join the GNOME movement?</title>

      <para>If you want to get seriously involved with GNOME, you
      really have to join the gnome-list mailing list (See <link
      linkend="MailingList">Mailing Lists</link>, above).  Check the
      list of mailing lists to see what other lists interest you.
      Also, make sure you read the GNOME Manifesto at <ulink
      url="&wwwgnomemanif;">&wwwgnomemanif;</ulink> and the articles
      on the GNU Project Philosophy at <ulink
      url="&wwwgnuphil;">&wwwgnuphil;</ulink> to make sure you know
      what kind of project you're getting involved in.  You don't have
      to agree with all of the philosophy in order to contribute to
      GNOME, but at least respect that some of us are committed to the
      ideas given in these documents.</para>

      <para>Since GNOME is a software project, we obviously can always
      use more programmers, but you don't have to be a programmer to
      help out with GNOME.  We also can always use more people sending
      in clear bug reports.  There is always more documentation to be
      written.  If you speak more than one language, we can always use
      translators, both of the documentation and of the labels,
      buttons and menu entries within the applications.  People
      willing to make binary packages for their system are quite
      welcome, particularly if nobody else is making binaries yet for
      that system.  People willing and able to mirror our WWW, FTP
      and/or CVS servers are enthusiastically encouraged to do
      so.</para>
    </sect1>

    <sect1>
      <title>I am a programmer, and I want to help, what can I
      do?</title>

      <para>There are a number of projects being worked on, you might
      want to check out the <filename>gnome-status</filename> CVS
      module from the CVS to see a list of projects that people have
      identified as needing work.</para>

      <para>A good rule is that you can always improve the robustness
      of code, improve the user interface, make the code simpler, make
      the user interface better, make sure applications are properly
      internationalized and localized. </para>
    </sect1>

    <sect1>
      <title>How do I get the bleeding edge, CVS versions of
      GNOME?</title>

      <para>If you are developing for GNOME, or if you just want to
      keep more up-to-date than the latest release, you should
      consider using our CVS system.  There is the main CVS server,
      which you need an account for, and a network of mirrors of the
      server, which anyone can read from.  This network of mirrors is
      collectively called Anonymous CVS, and they all can be accessed
      at anoncvs.gnome.org (they are set up with round-robin DNS to
      balance out the load).  If you are looking to contribute source
      code to the GNOME project, you will eventually want an account
      on the main CVS server, but get used to the Anonymous CVS system
      first, so you are familiar with how GNOME makes use of
      CVS.</para>

      <para>Directions on how to access the Anonymous CVS system are at
      <ulink url="&wwwgnomewicvs;">&wwwgnomewicvs;</ulink>.  There is also
      a very useful guide at <ulink
      url="&wwwsorencvs;">&wwwsorencvs;</ulink>.  The anonymous CVS
      servers should be updating themselves </para>

      <para>In order to use the CVS version, you need to have GNU
      tools installed on your system.  You need at least GNU Autoconf,
      Automake, Libtool and m4.  If your system doesn't include these,
      you can get them from the GNU website at <ulink
      url="&wwwgnu;">&wwwgnu;</ulink>.</para>
    </sect1>

    <sect1>
      <title>I want bleeding edge GNOME, but I can't use CVS.  How do
      I get it?</title>

      <para>There are some occasions where CVS just isn't feasible.
      Perhaps you want to make sure GNOME works using just the native
      tools for your system instead of the GNU tools.  Perhaps you are
      sitting on the other side of a firewall that blocks the CVS
      port.  Whatever your reason, Jim Pick Software offers daily
      snapshots of the CVS version, in tarball form, available via FTP
      at <ulink url="&ftpsnap;">&ftpsnap;</ulink>.  The conversion to
      tarball form bypasses the need for GNU tools as well.</para>
    </sect1>

    <sect1>
      <title>How do I get an account to let me contribute to the CVS
      version of GNOME?</title>

      <para>If you plan on contributing code to the project, then you
      will need an account on the CVS server. Miguel de Icaza (<ulink
      url="mailto:miguel@nuclecu.unam.mx">
      miguel@nuclecu.unam.mx</ulink>) determines who gets accounts on
      the CVS server; if you would like one, then send him a message
      detailing what code you plan on writing, along with with a
      crypted password. You can get that by doing the
      following:</para>

      <para><userinput>perl -e 'print crypt ("YourPassword",
      "salt");'</userinput></para>

      <para>Where the "salt" string preferably should be a random
      2-char string.</para>
    </sect1>

    <sect1>
      <title>Why are directories sometimes missing when I update a
      module from CVS?</title>

      <para>CVS has an excellent feature with an annoying quirk about
      it.  CVS allows a module to include other modules, a feature
      which GNOME uses to better organize things and to reduce
      duplication of code.  Unfortunately, the <command>cvs
      update</command> command doesn't bother to check to see if any
      new modules are included off of the main module.  If you think
      there is a missing piece, use <command>cvs get</command>
      instead, it will check for new included modules.  Don't worry,
      as long as the source tree is there, it won't try to do a brand
      new checkout, it will act the same as <command>cvs
      update</command> as far as only downloading what is new or
      updated.</para>
    </sect1>

    <sect1>
      <title>I am not a programmer, how can I contribute?</title>
      <para>
        There are many ways to contribute to the GNOME effort if you
        are a not a programmer.  You can help writing documentation
        (contact the people at docs@gnome.org for this), you can
        review the existing documentation and fix typos, format, and
        make the documentation more clear or enhance the examples.
      </para>
      <para>
  	If you are a non-english speaker and you understand english,
  	you can also help with the translation effort.  This means
  	translating application textual strings and documentation.  To
  	work on this, please subscribe to the
  	gnome-i18n@nuclecu.unam.mx mailing list.  To subscribe send a
  	message to &majorunam; and in the body of the message put
  	"subscribe gnome-i18n".  You can view the current status for
  	our language translation effort in the <ulink
  	url="&gwwwi18n;">&gwwwi18n;</ulink> web page.
      </para>
      <para>
        If you have a good idea or a great concept on how to improve
        the user interface experience in GNOME, please subscribe to
        the <ulink
        url="mailto:&gnomeguireq;">gnome-gui-list@gnome.org</ulink>.
        The user interface team is lead by Jim Cape who maintains a
        web page with the suggested improvements at <ulink
        url="&wwwgui;">&wwwgui;</ulink>
      </para>
    </sect1>
  </chapter>

  <chapter id="FAQIssues">
    <title>FAQ Issues</title>

    <sect1>
      <title>Where is the official copy of this FAQ?</title>

      <para>The formal and official copy of this FAQ is kept in
      DocBook (SGML) format on the CVS server at
      <filename>cvs.gnome.org:/cvs/gnome</filename>, the file itself
      is located in the <filename>gnome-libs</filename> module in the
      file <filename>devel-docs/gnome-faq.sgml</filename>.  All other
      versions are copies, ports, reformatings, etc.</para>
    </sect1>

    <sect1 id="ContactFAQ">
      <title>How do I add a question and/or an answer to this
      FAQ?</title>

      <para>The easiest way is to email the FAQ maintainer, at <ulink
      url="mailto:&mailfaq;">&mailfaq;</ulink>.  If the suggestion is
      appropriate, we will edit your information, and incorporate it in
      at the appropriate place.</para>

      <para>If you have CVS access, you can modify the FAQ on your
      own, but I would prefer if you limit direct modification to
      quick fixes of glaring errors, rather than major changes or
      additions.</para>
    </sect1>
  </chapter>

  <chapter id="Credits">
    <title>Credits</title>

    <sect1 id="Copyright">
      <title>Copyright and Disclaimer</title>

      <para>This work is copyright 1998 by Todd Lewis, Gleef (David
      Zoll) and Miguel de Icaza.  Parts of it are (C) Rasaki Bidem
      Bolante Temidire. This documentation is free software; you can
      redistribute it and/or modify it under the terms of the GNU
      General Public License as published by the Free Software
      Foundation; either version 2 of the License, or (at your option)
      any later version.</para>

      <para>This article is provided as is without any express or
      implied warranties. While every effort has been taken to ensure
      the accuracy of the information contained in this article, the
      author/maintainer/contributors assume(s) no responsibility for
      errors or omissions, or for damages resulting from the use of
      the information contained herein.</para>
    </sect1>

    <sect1 id="Trademark">
      <title>Trademarks and Naming Credits</title>

      <para>Here are some of the less obvious trademarks used in this
      document.</para>
      <simplelist>
	<member><firstterm>Linux</firstterm> is a trademark of Linus
	Torvalds.</member> 

	<member><firstterm>Debian</firstterm> is a trademark of
	Software in the Public Interest</member>

	<member><firstterm>Copyleft</firstterm> and <firstterm>Free
	Software</firstterm> are not trademarks of anyone, but they
	are important terms in the Free Software community, and for
	the Free Software Foundation.</member>
	
	<member><firstterm>Open Source</firstterm> is a service mark
	of either Software in the Public Interest or the Open Source
	Initiative or Bruce Perens, nobody's quite sure.</member>
	
	<member><firstterm>Unix</firstterm>, and <firstterm>The X
	Window System</firstterm> are trademarks of the Open
	Group.</member>

	<member><firstterm>OpenGL</firstterm> is a trademark of
	Silicon Graphics, Inc.</member>

	<member>All other trademarks are the property of their
	respective owners.</member>
      </simplelist>

      <para>If there is a trademark here that needs to be listed
      formally above, by all means let us know so it can be
      added.</para>
    </sect1>

  </chapter>
</book>
