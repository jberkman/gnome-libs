<!doctype book PUBLIC "-//Davenport//DTD DocBook V3.0//EN" [
]>
<book>
  <bookinfo>
    <title>Gnome Developers' Information</title>
    <authorgroup>
      <author>
	<firstname>Horacio</firstname>
	<surname>Peña</surname>
	<affiliation>
	  <address>
	    <email>horape@compendium.com.ar</email>
	  </address>
	</affiliation>
      </author>
    </authorgroup>
    <copyright>
      <year>1998</year>
      <holder>The GNOME Project - Horacio J. Peña (n.)</holder>
    </copyright>
    <legalnotice>
      <para>This documentation is free software; you can redistribute
	it and/or modify it under the terms of the GNU General Public
	License as published by the Free Software Foundation; either
	version 2 of the License, or (at your option) any later
	version.</para>

      <para>This program is distributed in the hope that it will be
	useful, but WITHOUT ANY WARRANTY; without even the implied
	warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
	PURPOSE.  See the GNU General Public License for more
	details.</para>

      <para>You should have received a copy of the GNU General Public
	License along with this program; if not, write to the Free
	Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
	MA 02111-1307 USA</para>

      <para>For more details see the file COPYING in the source
	distribution of GNOME.</para>
    </legalnotice>
  </bookinfo>

  <toc></toc>

  <chapter id="intro">
    <title>Introduction..</title>
    <sect1 id="feedback">
      <title>Feedback..</title>
      <para>Well, my native tongue is spanish, so you're probably going
        to find a lot of gramatic and spelling errors. Please tell me
        about them.</para>
      </sect1>

    <sect1 id="whatis">
      <title>What is GNOME..</title>
      <para>
	GNOME stands for GNU Network Object Model Environment. The GNOME
	project intends to build a complete, user-friendly desktop based
	entirely on free software. GNOME is part of the GNU project. The
	desktop will consist of small utilities and larger applications which
	share a consistent look and feel. GNOME uses GTK as the GUI toolkit
	for all GNOME-compliant applications.
	</para>
      </sect1>

    <sect1 id="thisdoc">
      <title>This document.</title>
      <para>
        <emphasis>WARNING</emphasis>: this tutorial is in really early stages.
        So it's almost empty and hasn't been checked. Uglier, GNOME is in early
        stages too, so it's APIs are changing very frequently and the info here
        is probably inaccurate. When this document and the code disagree, the
        code wins. :-)
        </para>
      <para>
        As a new GNOME developer i've had some trouble finding info about
        how to do some things (and the people on the list were being a bit
        annoyed with my questions.) So i'm trying to do it easy for you,
        the developers that come after me.
        </para>
      <para>
        This document is intended to be not only a tutorial, but a reference
        too. I hope it growing to be the ultimate guide to the GNOME internals.
        I would like including here the architecture notes that now are in
        the website and the style guide.
        </para>
      <para>
        If you add or change some API please document it here.
        </para>
      </sect1>

    </chapter>

  <chapter id="nontech">
    <title>Non (very) technical issues.</title>
    <para>
      This chapter will discuse issues ranging from how to obtain a CVS account
      to indenting standards.
      </para>

    <sect1 id="proglang">
      <title>Programming languages that can be used in GNOME.</title>
      <para>
        GNOME is intendeed to support any languages. But you need to have
        GTK+ and GNOME bindings for your particular language. Our prefereed
        languages are C and scheme (using guile.) There are bindings too
        for Objective C. There are GTK bindings for C++ (Gtk--) and for
        Perl, but afaik there aren't very good and still there aren't bindings
        for gnome stuff for these languages.
        </para>
      </sect1>

    <sect1 id="start">
      <title>How to start hacking GNOME.</title>
      <para>
        Read the README and HACKING files to know how to download the latest
        gnome from CVS.
	</para>
      <para>
        You will need know the Gtk+ toolkit. If you don't know it read the
        <ulink URL="http://www.levien.com/~slow/gtk/">Gtk+ Tutorial</ulink>.
        </para>
      <para>
        When you've made your changes you need to make a diff... The best
        way to do it is:
        <literallayout>
        <prompt>$ </prompt><userinput>cvs diff -u > diffs</userinput>
        </literallayout>
        [FIXME: Does it work with anonimous CVS?]
        After it send the diffs file to <email>gnome-list@gnome.org</email>.
	In a short time someone of the core hackers will answer you and he
	is going to be your "GNOME godfather". Then, and until you have a
	CVS account send your patches to him.
        [FIXME: What think, you GNOME core hackers, about the godfather idea?]
        </para>
      </sect1>

    <sect1 id="what">
      <title>What to hack.</title>
      <para>
        If you want to dirt your hands with GNOME, i've some advice for you:
	</para>
      <itemizedlist>
        <listitem><para>Start simple. Do little things and familiarize yourself 
          with GNOME. You'll have time to do great things after.</para>
          </listitem>
        <listitem><para>Read the TODO. You'll find some interesting things to 
          work in.</para>
          </listitem>
        </itemizedlist>
      </sect1>

    <sect1 id="CVS">
      <title>Obtaining a CVS account.</title>
      <para>
        When you was working in the GNOME during a while it's time for getting
        a CVS account, so you can submit your patches directly. Just ask
        your "godfather" for it.
	</para>
      </sect1>

    <sect1 id="altpol">
      <title>Policy on hacking another people's code.</title>
      <para>
        If you're going to do a little fixes, go and do it. But if you
        plan to do changes to some API or rewriting some code please tell
        it to the author. (i've learned it by the hard way and the gnome-score
        stuff is broken yet because my error :-( )
	</para>
      </sect1>

    <sect1 id="addAUTH">
      <title>When adding yourself to AUTHORS file.</title>
      <para>
        We know it. You're working in the GNOME to impress girls saying them:
        "Hey, I'm a GNOME developer" :-), so you're wanting to add yourself to
        the AUTHORS file as quickly as you can...
	</para>
      <para>
        To know when you can add yourself only think :-), if you've only
        fixed some typos don't do it. If you've added a great bunch of
        (good) code, then do it.
        </para>
      <para>
        (<emphasis>Very personal opinion:</emphasis>) I suggest you don't 
        adding yourself to the root AUTHORS file. I think you should
        wait some of the core hackers recognize your work and add you.
        (i believe it would be very much more satisfying to know that the
        "real" hackers value your work, probably this belief is why i amn't
        there yet... :-) )
        </para>
      </sect1>

    <sect1 id="codstd">
      <title>Coding Standards.</title>
      <para>
      <itemizedlist>
        <listitem><para> Code that goes into Gnome uses the Linux kernel coding 
          style (which is basically the GNU coding style but indentation is 
          8 spaces, and braces are on the same line as the statements that 
          open the block).</para>
        <listitem><para> Please, please, please, be in the 80 columns...</para>
          </listitem>
        <listitem><para> When you change things, edit the ChangeLog, so the 
          other people can know what you've did.</para></listitem>
        <listitem><para> When you're writing code that should be written better
          add FIXME comments so it's easy to recognize.</para></listitem>
        <listitem><para> Document your programs.</para></listitem>
        <listitem><para> If you do changes to the APIs documented here or add
          new please update the documentation.</para></listitem>
        <listitem><para> Add translations for your native tongue. We would like
          have a full internationalized GNOME. (so if you know more than
          one language do translations for all them) (we would like all
          the idioms, from francais to old greek :-) )</para></listitem>
        </itemizedlist>
      </sect1>

    </chapter>

  <chapter id="tutorial">
    <title>GNOME Developer's Tutorial.</title>
      <para>
	From the gnome-hello manual:
	</para>
        <para>
	  gnome-hello is a GNOME application which contains all the essential
	  and common features of GNOME programs, such as initialization, event
	  loops, configuration file parsing, internationalization and so forth.
	  </para>
        <para>	
	  gnome-hello is intended to be an example of the GNOME coding
	  standards, as well as a fun and useless little program.
	  </para>
      <para>
        In this chapter we're going to use it to explain the basics features 
        that a application must have to be considered gnome-complaint.
        </para>

      <sect1 id="tut-basics">
      	<title>Starting with GNOME</title>
	<screenshot>
	  <screeninfo>A basic GNOME App: a window with only a button
	    </screeninfo>
	  <graphic fileref="gnome-hello-0-basic.jpg"></graphic>
	  </screenshot>
      	<para>
      	  We'll start with a very basic application. It's only a window
      	  with a button that, when clicked close the window and prints
      	  "Hello GNOME". The code source for it is in <filename>
      	  programs/gnome-hello/gnome-hello-0-basic.c</filename>. [FIXME:
      	  Should i include the full code here?]
      	  </para>
	<programlisting>
	  #include &lt;config.h&gt;
	  #include &lt;gnome.h&gt;
	  </programlisting>
	<para>
	  All the programs have to include <filename>gnome.h</filename>, that 
	  gives all you need to use the Gtk+ and GNOME libraries.
	  </para>
	<programlisting>
	int
	main(int argc, char *argv[])
	{
	</programlisting>
        <para><function>gnome_init</function> is always called at the beginning 
          of a program. It takes care of initializing both Gtk and GNOME.
          </para>
	<programlisting>
	  gnome_init (&amp;argc, &amp;argv);
	</programlisting>
	<para>Then we call <function>prepare_app</function> that do the real 
	  work and <function>gtk_main</function> to enter into the main 
	  processing loop.
	  </para>
	<programlisting>
	  prepare_app ();

 	  gtk_main ();

	  return 0;
	}
	</programlisting>
	<para>Let's now go to the <function>prepare_app</function> code...
	  </para>
        <programlisting>
	void
	prepare_app()
	{
	  GtkWidget *button;
	</programlisting>
      	<para>We first make the main window calling
	  <function>gnome_app_new</function> and connect the signal 
	  <function>delete_event</function> to the callback 
	  <function>quit_cb</function>, so the user can close the app via the 
	  WM:
	  </para>
	<programlisting>
	  app = gnome_app_new ("hello", "Hello World Gnomified");
	  gtk_widget_realize (app);
	  gtk_signal_connect (GTK_OBJECT (app), "delete_event",
	                      GTK_SIGNAL_FUNC (quit_cb), NULL);
        </programlisting>
	<para>Then, we create a button and set it to be the content of the main
	  window.
	  </para>
	<programlisting>
	  button = gtk_button_new_with_label ("Hello GNOME");
	  gtk_signal_connect (GTK_OBJECT (button), "clicked",
	                     GTK_SIGNAL_FUNC (hello_cb), NULL);
	  gtk_container_border_width (GTK_CONTAINER (button), 60);
	  gnome_app_set_contents ( GNOME_APP (app), button);
        </programlisting>
	<para>Finally, we show the widgets. It could be done in any order,
	  but we display at last the main window so the whole window
	  will popup at once rather than seeing the window pop up, and 
	  then the button form inside of it.
	  </para>
	<programlisting>
	  gtk_widget_show (button);
 	  gtk_widget_show (app);
	}
	</programlisting>
	<para>The callbacks (<function>hello_cb</function> for the button and 
	  <function>quit_cb</function> for <literal>delete_event</literal>)
	  are very simple. They just call <function>gtk_main_quit</function> 
	  to exit.
	  </para>
	<programlisting>
	void
	hello_cb (GtkWidget *widget, void *data)
	{
  	  g_print ("Hello GNOME\n");
	  gtk_main_quit ();
	  return;
	}

	void
	quit_cb (GtkWidget *widget, void *data)
	{
	  gtk_main_quit ();
	  return;
	}
	</programlisting>
	</sect1>
	
      <sect1 id="tut-menus">
      	<title>Adding menus</title>
	<screenshot>
	  <graphic fileref="gnome-hello-1-menus.jpg"></graphic>
	  </screenshot>
      	<para>
      	  From the <citetitle>GNOME Style Guide</citetitle>
      	  </para>
      	<para>
      	  <literallayout>
Menus and MenuBars
        Menubars should be present in every App.
            All apps should have a "Help" entry in the Menubar.
            All menu items need at least one item.
            An about Menu should be available in under the Help Menu and
            should open a small dialog telling at least app name, author,
            version, and date.
            A "File" menu should be in every app, and contain at least
            quit.
            Menu items that open dialogs should indicate it with an "..."
            Menu items that lead to submenus should indicate it with an
            arrow. The Help Menu should be right justified in the
            Menubar.
	    </literallayout>
	  </para>
      	<para>
          At the time of the writing of this draft gnome-hello uses the 
          GtkMenuFactory way of creating menus. It's going to be replaced
          by the gnome-app-helper in a little time. (when the gnome_app_*
          have support for i18n, accelerators and rigth-justified menus). Until
          then isn't going to be an explanation about "how" do the menus.
      	  </para>
      	<para>
      	  The menu options present in gnome-hello are only the mandatory: 
          <guimenuitem>File/Exit</guimenuitem>, that uses the same quit_cb
          that we've seen in the previous section, and
      	  <guimenuitem>Help/About...</guimenuitem> that uses the 
      	  gnome-about widget (see <xref linkend="gnome-about">) written
      	  by Cesar <email>miquel@df.uba.ar</email>.
      	  </para>
      	<programlisting>
void
about_cb (GtkWidget *widget, void *data)
{
  GtkWidget *about;
  gchar *authors[] = {
/* Here should be your names */
          "Mark Galassi",
          "Horacio J. Peña",
          NULL
          };

  about = gnome_about_new ( "The Hello World Gnomified", VERSION,
                        /* copyrigth notice */
                        "(C) 1998 the Free Software Foundation",
                        authors,
                        /* another comments */
                        "GNOME is a civilized software system "
                          "so we've a \"hello world\" program",
                        NULL);
  gtk_widget_show (about);

  return;
}
      	  </programlisting>
	</sect1>

      <sect1 id="tut-i18n">
      	<title>Internationalization.</title>
	<screenshot>
	  <graphic fileref="gnome-hello-2-i18n.jpg"></graphic>
	  </screenshot>
      	<para>
	  Internationalization (i18n for short) is very easy with GNOME. We
	  use GNU gettext. You need to initialize it with a call to 
	  <function>bindtextdomain</function> and
	  <function>textdomain</function> in your main function.
 	  After it a _() to all the strings that need translation. 
      	  </para>
      	<para>
      	  You will need add your file to po/POTFILES.in. Then you can do
      	  <literal>make gnome.pot;make update-po</literal>, edit the .po file
      	  corresponding to you tongue and do <literal>make install</literal>.
      	  Now try your program... Wow! It's speaking in Spanish/Finnish/Latin...
      	  </para>
      	<para>
      	  <emphasis>Warning</emphasis>: _() is a macro for the function gettext.
      	  So it won't work when initializing arrays of strings or structs. Then
      	  you need use the N_() macro around the strings and when you use
      	  them do the _() stuff. If you want know more about it read the info
      	  documentation of GNU gettext.
      	  [FIXME: is my explanation correct? I haven't read a C book in the
      	  last 5 years so i don't remember when/why you can't call functions
      	  in init's]
      	  </para>
	</sect1>
	
      <sect1 id="tut-parsing">
      	<title>Parsing parameters.</title>
      	<para>
      	  Well, Carsten and Tom are talking about standarizing it, so i'll
      	  wait a bit their definitions.
      	  <para>
	</sect1>
	
      <sect1 id="tut-SM">
      	<title>Session Management.</title>
      	<para>
      	  Err, Tom and Carsten are redefining it so i'll wait their
      	  conclusions.
      	  </para>
	</sect1>

      <sect1 id="tut-doc">
      	<title>Help and documentation.</title>
      	<para>
      	  I think that Mark would like writting this section... [FIXME: Mark,
      	  do you want do it?]
      	  </para>
	</sect1>
	
    </chapter>

  <chapter id="arch">
    <title>Architecture notes.</title>
      <para>
        [FIXME: I think that we could include here the notes that now are in
        the website.]
        </para>
    </chapter>

  <chapter id="libgnome">
    <title>GNOME library.</title>
      <para>
        This chapter is intended to be a reference to the libgnome.
        </para>
      <sect1 id="gnome-config">
        <title>gnome-config - Configuration helper routines.</title>
        <para>
          <emphasis>Author</emphasis>: Miguel de Icaza.
          </para>
        <para>
          OK, i was able to document gnome-config, but it's going a major
          redesign, so i'll wait.
          </para>
        </sect1>
      <sect1 id="gnome-dentry">
        <title>gnome-dentry - Support for manipulating .desktop files.</title>
        <para>
          <emphasis>Authors</emphasis>: Miguel de Icaza, Federico Mena.
          </para>
        <para>
          </para>
        </sect1>
      <sect1 id="gnome-dl">
        <title>gnome-dl - Dynamic loading for gnome.</title>
        <para>
          <emphasis>Author</emphasis>: Chris Toshok.
          </para>
        <para>
          </para>
        </sect1>
      <sect1 id="gnome-dns">
        <title>gnome-dns - Asynchronic DNS routines.</title>
        <para>
          <emphasis>Author</emphasis>: Ian Main.
          </para>
        <para>
          </para>
        </sect1>
      <sect1 id="gnome-fileconvert">
        <title>gnome-fileconvert - </title>
        <para>
          <emphasis>Author</emphasis>: Who knows?
          </para>
        <para>
          </para>
        </sect1>
      <sect1 id="gnome-history">
        <title>gnome-history - "Recently used" routines.</title>
        <para>
          <emphasis>Author</emphasis>: Elliot Lee.
          </para>
        <para>
          </para>
        </sect1>
      <sect1 id="gnome-hook">
        <title>gnome-hook - Hook management routines.</title>
        <para>
          <emphasis>Authors</emphasis>: Miguel de Icaza, Janne Kukonlehto, 
            Dugan Porter, Jakub Jelinek.
          </para>
        <para>
          </para>
        </sect1>
      <sect1 id="gnome-mime">
        <title>gnome-mime - MIME management code.</title>
        <para>
          <emphasis>Author</emphasis>: Paolo Molaro.
          </para>
        <para>
          </para>
        </sect1>
      <sect1 id="gnome-score">
        <title>gnome-score - "Top Ten" routines</title>
        <para>
          <emphasis>Authors</emphasis>: Elliot Lee, Horacio Peña.
          </para>
        <warning><para> It's broken now.</para></warning>
        <para>
          </para>
        </sect1>
      <sect1 id="gnome-string">
        <title>gnome-string - </title>
        <para>
          <emphasis>Author</emphasis>: Who knows?
          </para>
        <para>
          </para>
        </sect1>
      <sect1 id="gnome-triggers">
        <title>gnome-triggers - </title>
        <para>
          <emphasis>Author</emphasis>: Elliot Lee.
          </para>
        <para>
          </para>
        </sect1>
      <sect1 id="gnome-util">
        <title>gnome-util - </title>
        <para>
          <emphasis>Author</emphasis>: Who knows?
          </para>
        <para>
          </para>
        </sect1>
    </chapter>

  <chapter id="libgnomeui">
    <title>GNOME User Interface library.</title>
      <para>
        This chapter is intended to be a reference to the libgnomeui.
        </para>

      <sect1 id="gnome-about">
        <title>gnome-about - About widget.</title>
        <para>
          <emphasis>Author</emphasis>: Cesar Miquel.
          </para>
        <para>
          </para>
        </sect1>

      <sect1 id="gnome-actionarea">
        <title>gnome-actionarea - </title>
        <para>
          <emphasis>Author</emphasis>: Spencer Kimball, Peter Mattis.
          </para>
        <para>
          </para>
        </sect1>

      <sect1 id="gnome-app-helper">
        <title>gnome-app-helper - Routines to make menus and toolbars.</title>
        <para>
          <emphasis>Author</emphasis>: Elliot Lee.
          </para>
        <para>
          </para>
        </sect1>

      <sect1 id="gnome-app">
        <title>gnome-app - GnomeApp widget.</title>
        <para>
          <emphasis>Author</emphasis>: Elliot Lee.
          </para>
        <para>
          </para>
        </sect1>

      <sect1 id="gnome-color-selector">
        <title>gnome-color-selector - Color selector in one button.</title>
        <para>
          <emphasis>Author</emphasis>: Federico Mena.
          </para>
        <para>
          </para>
        </sect1>

      <sect1 id="gnome-colors">
        <title>gnome-colors - GNOME color management.</title>
        <para>
          <emphasis>Author</emphasis>: Based on GIMP.
          </para>
        <para>
          </para>
        </sect1>

      <sect1 id="gnome-font-selector">
        <title>gnome-font-selector - Font Selector widget.</title>
        <para>
          <emphasis>Author</emphasis>: Elliot Lee.
          </para>
        <para>
          </para>
        </sect1>

      <sect1 id="gnome-ice">
        <title>gnome-ice - Interface between ICE and Gtk+.</title>
        <para>
          <emphasis>Author</emphasis>: Tom Tromey.
          </para>
        <para>
          </para>
        </sect1>

      <sect1 id="gnome-messagebox">
        <title>gnome-messagebox - Message Box widget.</title>
        <para>
          <emphasis>Author</emphasis>: Jay Painter.
          </para>
        <para>
          </para>
        </sect1>

      <sect1 id="gnome-pixmap">
        <title>gnome-pixmap - </title>
        <para>
          <emphasis>Authors</emphasis>: Miguel de Icaza, Federico Mena.
          </para>
        <para>
          </para>
        </sect1>

      <sect1 id="gnome-properties">
        <title>gnome-properties - </title>
        <para>
          <emphasis>Author</emphasis>: Who knows?
          </para>
        <para>
          </para>
        </sect1>

      <sect1 id="gnome-scores">
        <title>gnome-scores - "High Scores" widget.</title>
        <para>
          <emphasis>Author</emphasis>: Horacio Peña.
          </para>
        <para>
          </para>
        </sect1>

      <sect1 id="gnome-session">
        <title>gnome-session - Session Management</title>
        <para>
          <emphasis>Author</emphasis>: Tom Tromey.
          </para>
        <para>
          [FIXME: Should be in libgnome, IMHO]
          </para>
        </sect1>

      <sect1 id="gnome-stock">
        <title>gnome-stock - default icons for toolbars, menu pixmaps, etc.</title>
        <para>
          <emphasis>Author</emphasis>: Who knows?
          </para>
        <para>
          </para>
        </sect1>

      <sect1 id="gtk-clock">
        <title>gtk-clock - Clock widget.</title>
        <para>
          <emphasis>Author</emphasis>: Szekeres István.
          </para>
        <para>
          </para>
        </sect1>

      <sect1 id="gtk-ted">
        <title>gtk-ted - Minimal GUI editor Gtk container widget.</title>
        <para>
          <emphasis>Author</emphasis>: Miguel de Icaza.
          </para>
        </sect1>

    </chapter>
</book>
