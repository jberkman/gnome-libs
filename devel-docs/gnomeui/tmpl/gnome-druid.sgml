<!-- ##### SECTION Title ##### -->
GnomeDruid

<!-- ##### SECTION Short_Description ##### -->
  The top-level widget of the GNOME DRUID system.

<!-- ##### SECTION Long_Description ##### -->
  <para>
    The GNOME DRUID is a system for assisting the user with installing a
    service.  It is roughly equivilent in functionality to the
    "Wizards" available in windows.
  </para>
  <para>
    There are two major parts of the druid, the #GnomeDruid widget,
    and the set of #GnomeDruidPage widgets.  The #GnomeDruid widget is
    the top level widget that interacts with the user.  It has a Next,
    a Prev, and a Cancel button, as well as acts as a container.  It
    is not a top-level widget, so it needs to be put in a #GtkWindow
    in almost all cases.  The #GnomeDruidPage is a virtual widget,
    from which all of the actual content of the page inherits from.
    There are currently three of these available.  However, there is
    no reason why more couldn't be written.
  </para>
  <refsect2>
    <title>Creating a DRUID</title>
    <para>
      GNOME DRUIDs are fairly simple to program with.  One starts by
      creating a #GnomeDruid into which one puts all of your pages.
      This widget will handle the presentation of the #GnomeDruidPage
      widgets.
    </para>
    <para>
      One then creates all appropriate #GnomeDruidPage widgets.  There
      are three implementations of these in libgnomeui.  They are the
      #GnomeDruidPageStart, the #GnomeDruidPageStandard, and the
      #GnomeDruidPageFinish.  The #GnomeDruidPageStandard acts as a
      #GtkContainer, and is probably the most commonly used DRUID
      page.  More information on the specific properties of these
      widgets can be found on their respective pages.
    </para>
    <para>
      In order to appear in the druid, you will need to add the pages to
      it.  The druid itself keeps an internal list of all pages, and
      using the gnome_druid_prepend_page(), gnome_druid_append_page(),
      and gnome_druid_insert_page() will place them into it.  
    </para>
  </refsect>
  <refsect2>
    <title>Managing the control-flow in a DRUID</title>
    <para>
      The control-flow in a DRUID is managed at the #GnomeDruidPage
      level, and is a little complex.  The signals available are "back",
      "next", "finish", "cancel" and "prepare", and all but the last are
      triggered when any of their respective buttons are pressed.  The
      current page will emit the appropriate signal in this case.  It is
      up to the DRUID author to trap this signal in the 
    </para>
    <para>
      
    </para>
  </refsect2>
<!-- ##### SECTION See_Also ##### -->
  <para>
    #GnomeDruidPage, #GnomeDruidPageStart, #GnomeDruidPageStandard, #GnomeDruidPageFinish
  </para>


<!-- ##### FUNCTION gnome_druid_new ##### -->
<para>

</para>

@Returns:


<!-- ##### FUNCTION gnome_druid_set_buttons_sensitive ##### -->
<para>

</para>

@druid:
@back_sensitive:
@next_sensitive:
@cancel_sensitive:


<!-- ##### FUNCTION gnome_druid_set_show_finish ##### -->
<para>

</para>

@druid:
@show_finish:


<!-- ##### FUNCTION gnome_druid_prepend_page ##### -->
<para>

</para>

@druid:
@page:


<!-- ##### FUNCTION gnome_druid_insert_page ##### -->
<para>

</para>

@druid:
@back_page:
@page:


<!-- ##### FUNCTION gnome_druid_append_page ##### -->
<para>

</para>

@druid:
@page:


<!-- ##### FUNCTION gnome_druid_set_page ##### -->
<para>

</para>

@druid:
@page:


<!-- ##### SIGNAL GnomeDruid::cancel ##### -->
<para>

</para>

@druid: the object which received the signal.

