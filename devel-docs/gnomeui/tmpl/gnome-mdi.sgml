<!-- ##### SECTION Title ##### -->
GnomeMDI

<!-- ##### SECTION Short_Description ##### -->
GNOME Multiple Document Interface

<!-- ##### SECTION Long_Description ##### -->
  <para>
    The <type>GnomeMDI</type> object lets the application manage a
    number of documents and displays their views in a configurable
    fashion.
  </para>
  
  <para>
    Once an instance of <type>GnomeMDI</type> has been created, you
    can add documents to it using gnome_mdi_add_child() and add views
    of these documents with gnome_mdi_add_view() routine. GnomeMDI
    also provides means to create global menus and toolbar that apply
    for each document and for merging document-specific menus with the
    global ones. MDI automatically creates a menu containing a list of
    all open documents. The global menus and toolbar can be created
    using a template GnomeUIInfo structure or with a handler for
    app_created signal which allows for customization of all
    <type>GnomeApp</type> widgets that <type>GnomeMDI</type> creates.
  </para>

  <para>
    The views are displayed in one of three modes that can be set using
    gnome_mdi_set_mode() function:
    <itemizedlist> 
      <listitem><para>
	  %GNOME_MDI_NOTEBOOK mode displays each view in a notebook page. The user can create
	  any number of notebooks, each within its toplevel <type>GnomeApp</type> and drag
	  pages from one to another, thus distributing the views between them in any
	  desired manner.
	</para></listitem>
      <listitem><para>
	  %GNOME_MDI_TOPLEVEL mode displays each view in its own toplevel window.
	</para></listitem>
      <listitem><para>
	  %GNOME_MDI_MODAL mode displays only a single view of a document.
	</para></listitem>
      <listitem><para>
	  %GNOME_MDI_DEFAULT uses the mode that can be configured on a per-user
	  basis via the GNOME control center.
	</para></listitem>
    </itemizedlist>
  </para>
  
  <para>
    <type>GnomeMDI</type> can automatically save and restore its state and the state
    of its children and layout, which is particularly useful to simplify implementation
    of session managment.
  </para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### STRUCT GnomeMDI ##### -->
<para>

</para>


<!-- ##### ENUM GnomeMDIMode ##### -->
<para>

</para>


<!-- ##### FUNCTION gnome_mdi_new ##### -->
<para>

</para>

@appname: 
@title: 
@Returns: 


<!-- ##### FUNCTION gnome_mdi_set_mode ##### -->
<para>

</para>

@mdi: 
@mode: 


<!-- ##### FUNCTION gnome_mdi_set_menubar_template ##### -->
<para>

</para>

@mdi: 
@menu_tmpl: 


<!-- ##### FUNCTION gnome_mdi_set_toolbar_template ##### -->
<para>

</para>

@mdi: 
@tbar_tmpl: 


<!-- ##### FUNCTION gnome_mdi_set_child_menu_path ##### -->
<para>

</para>

@mdi: 
@path: 


<!-- ##### FUNCTION gnome_mdi_set_child_list_path ##### -->
<para>

</para>

@mdi: 
@path: 


<!-- ##### FUNCTION gnome_mdi_add_view ##### -->
<para>

</para>

@mdi: 
@child: 
@Returns: 


<!-- ##### FUNCTION gnome_mdi_add_toplevel_view ##### -->
<para>

</para>

@mdi: 
@child: 
@Returns: 


<!-- ##### FUNCTION gnome_mdi_remove_view ##### -->
<para>

</para>

@mdi: 
@view: 
@force: 
@Returns: 


<!-- ##### FUNCTION gnome_mdi_get_active_view ##### -->
<para>

</para>

@mdi: 
@Returns: 


<!-- ##### FUNCTION gnome_mdi_set_active_view ##### -->
<para>

</para>

@mdi: 
@view: 


<!-- ##### FUNCTION gnome_mdi_add_child ##### -->
<para>

</para>

@mdi: 
@child: 
@Returns: 


<!-- ##### FUNCTION gnome_mdi_remove_child ##### -->
<para>

</para>

@mdi: 
@child: 
@force: 
@Returns: 


<!-- ##### FUNCTION gnome_mdi_remove_all ##### -->
<para>

</para>

@mdi: 
@force: 
@Returns: 


<!-- ##### FUNCTION gnome_mdi_open_toplevel ##### -->
<para>

</para>

@mdi: 


<!-- ##### FUNCTION gnome_mdi_update_child ##### -->
<para>

</para>

@mdi: 
@child: 


<!-- ##### FUNCTION gnome_mdi_get_active_child ##### -->
<para>

</para>

@mdi: 
@Returns: 


<!-- ##### FUNCTION gnome_mdi_find_child ##### -->
<para>

</para>

@mdi: 
@name: 
@Returns: 


<!-- ##### FUNCTION gnome_mdi_get_active_window ##### -->
<para>

</para>

@mdi: 
@Returns: 


<!-- ##### FUNCTION gnome_mdi_register ##### -->
<para>

</para>

@mdi: 
@object: 


<!-- ##### FUNCTION gnome_mdi_unregister ##### -->
<para>

</para>

@mdi: 
@object: 


<!-- ##### FUNCTION gnome_mdi_get_app_from_view ##### -->
<para>

</para>

@view: 
@Returns: 


<!-- ##### FUNCTION gnome_mdi_get_child_from_view ##### -->
<para>

</para>

@view: 
@Returns: 


<!-- ##### FUNCTION gnome_mdi_get_view_from_window ##### -->
<para>

</para>

@mdi: 
@app: 
@Returns: 


<!-- ##### FUNCTION gnome_mdi_get_menubar_info ##### -->
<para>

</para>

@app: 
@Returns: 


<!-- ##### FUNCTION gnome_mdi_get_toolbar_info ##### -->
<para>

</para>

@app: 
@Returns: 


<!-- ##### FUNCTION gnome_mdi_get_child_menu_info ##### -->
<para>

</para>

@app: 
@Returns: 


<!-- ##### SIGNAL GnomeMDI::add-child ##### -->
<para>

</para>

@mdi: the object which received the signal.
@arg1: 
@Returns: 

<!-- ##### SIGNAL GnomeMDI::remove-child ##### -->
<para>

</para>

@mdi: the object which received the signal.
@arg1: 
@Returns: 

<!-- ##### SIGNAL GnomeMDI::add-view ##### -->
<para>

</para>

@mdi: the object which received the signal.
@widget: 
@Returns: 

<!-- ##### SIGNAL GnomeMDI::remove-view ##### -->
<para>

</para>

@mdi: the object which received the signal.
@widget: 
@Returns: 

<!-- ##### SIGNAL GnomeMDI::child-changed ##### -->
<para>

</para>

@mdi: the object which received the signal.
@arg1: 

<!-- ##### SIGNAL GnomeMDI::view-changed ##### -->
<para>

</para>

@mdi: the object which received the signal.
@widget: 

<!-- ##### SIGNAL GnomeMDI::app-created ##### -->
<para>

</para>

@mdi: the object which received the signal.
@arg1: <!--
Local variables:
mode: sgml
sgml-parent-document: ("../gnomeui-docs.sgml" "book" "sect1" "")
End:
-->

