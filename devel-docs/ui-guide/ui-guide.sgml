<!doctype book PUBLIC "-//Davenport//DTD DocBook V3.0//EN" [
]>
<!-- Marked up by Martin Wahlén <mva@sbbs.se> -->
<book>
  <bookinfo>
    <title>GNU Network Object Model Environment</title>
    <title>User Interface Guidelines</title>
    <authorgroup>
      <author>
        <firstname>Federico</firstname>
	<othername>Mena</othername>
        <surname>Quintero</surname>
        <affiliation>
          <address>
            <email>federico@nuclecu.unam.mx</email>
          </address>
        </affiliation>
      </author>
    </authorgroup>

  </bookinfo>

<toc></toc>

<chapter id="About">

  <title>About this document</title>

  <para>
  This document contains the user interface guidelines that developers
  should follow when writing applications for the GNU Network Object
  Model Environment (GNOME).
  </para>
  <para>
  One of the main goals of the GNOME project is to provide a consistent
  graphical user interface for applications.  Users can benefit greatly
  from a uniform and consistent look-and-feel among applications.  When
  a group of programs share the same philosophy about the user
  interface, users can just learn how to use the user interface for any
  one of those programs and apply their knowledge on the rest of them,
  without having to re-learn a different user interface.
  </para>
  <para>
  This document describes the philosophy of the GNOME user interface and
  contains ways in which developers may access the standard user
  interface elements of GNOME.  Wherever possible, it contains source
  code examples that can be used to implement this functionality.  It
  also provides examples of how not to design user interfaces for GNOME
  applications; these appear with an explanation regarding why these
  examples are "bad design" and how to correct them.
  </para>
</chapter>
<chapter id="fundamentals">
  <title>Fundamentals of the GNOME user interface</title>
  <para>
  [This is to be modeled after Part 1 "Fundamentals" of the Macintosh
  User Interface Guidelines.]
  </para>
  <sect1 id="cl">
    <title>Compliancy levels</title>
    <para>
    This document will often speak of "GNOME compliancy levels".  Programs
    can be assigned ratings of conformance to the GNOME User Interface
    Guidelines based on these compliancy levels.
    </para>
    <para>
    The purpose of having compliancy levels is to let developers
    progressively implement features of the GNOME user interface into
    their programs, by being able to know which of those features are more
    important than others.
    </para>
    <para>
    When this document describes a particular user interface feature, it
    will be labeled with a specific compliancy level so that developers
    can implement those features in an orderly fashion.
    </para>
    <para>
    There are five compliancy levels for the GNOME user interface:
      <itemizedlist>
         <listitem><para>GNOME compliancy level 1 (G1) - Mandatory</para>
           <para>
           All applications are expected to have G1 features.  These
           are meant to be the bare minimum user interface features
           that applications should have.
           </para>

         <listitem>
           <para>
           GNOME compliancy level 2 (G2) - Highly recommended
           </para>
           <para>
           Features in the G2 level are to be expected in the final version
           of an application (i.e. one that is past the beta stage).  All GNOME
           applications of release-quality are expected to have G2 features.
           </para>
         <listitem>
           <para>
           GNOME compliancy level 3 (G3) - Suggested
           </para>
           <para>
           Features in the G3 level are not to be expected in applications.
           These are features that may not be applicable in all situations, are
           hard to implement, or are beyond the call of duty.  It is suggested
           that very polished applications try to implement G3 features.
           </para>
         <listitem>
           <para>
           GNOME compliancy level 4 (G4) - Nice to have
           </para>
           <para>
           Features in the C4 level are minor conveniences that developers may
           not decide to implement.  Users will experience C4 level features as
           ocassionaly useful, but definitely not needed for a functional user
           interface.
           </para>
         <listitem>
           <para>
           GNOME compliancy level 5 (G5) - Experimental features
           </para>
           <para>
           Features in the G5 level are experimental user interface conventions
           that are in development.  As such, they may have not been formalized
           enough for developers to use consistently.  It is recommended that no
           release-quality application have G5 level features -- only development
           and proof-of-concept programs should use these when appropriate.
           </para>
           <para>
           When features in the G5 level are formalized enough to be included in
           the G1-G4 levels, they will be moved there and cease to be
           experimental features.  It is recommended that the original developers
           of G5 features help application developers integrate these new
           features in their applications.
           </para>
      </itemizedlist>
  </sect1>
  <sect1>
    <title>User interface principles</title>
    <para></para>
  </sect1>
  <sect1>
    <title>Design considerations</title>
    <para></para>
  </sect1>
  <sect1>
    <title>Developing the user interface</title>
    <para></para>
  </sect1>
</chapter>
<chapter>
<title>User interface components</title>
  <sect1>
    <title>Windows</title>
    <sect2>
      <title>Main application windows -- GnomeApp</title>
      <para>
      Many applications can use the standard application windows provided by
      the GnomeApp widget in the libgnomeui library.  A GnomeApp window
      provides a toplevel window with a title, an optional menu bar, an
      optional tool bar, a content area, and an optional status bar.

      [Screenshot/diagram of a skeleton GnomeApp window]
      </para>
    </sect2>
    <sect2>
      <title>Non-standard application windows</title>
      <para>
      [For example, the gtcd CD player uses a toplevel window with no menu
      bar or tool bar; explain why and when can non-standard application
      windows be used.]
      </para>
    </sect2>
  </sect1>
  <sect1>
    <title>Menus</title>
    <para>
    This chapter describes the kinds of menus you can implement in GNOME
    applications:  pull-down menus, hierarchical menus, pop-up menus, and
    tear-off menus.  This chapter defines the standard menu items that
    should be present in menus used by GNOME applications.
    </para>
    <para>
    It is highly recommended that applications create their menus using
    the gnome-app-helper module.  This allows the programmer to easily
    specify a definition for a hierarchical menu which can then be plugged
    into a GnomeApp application window.
    </para>
    <sect2>
      <title>Application menu bar</title>
      <para>
      Application windows based on GnomeApp are expected to have a menu bar
      with at least the items described in this section.  For GnomeApp
      windows, this menu bar is defined to be in the G1 compliancy level.
      </para>
      <para>
      All the submenu labels in the menu bar are flushed to the left of the
      menu bar.  They are specified in order from left to right, as follows:
      </para>
      <para>
      1. File menu.  This should have at least one item called "Exit", using
      the GNOME_STOCK_MENU_EXIT icon.  If the application does not deal with
      documents or files, it can use a different name for the File menu.
      For example, it could be substituted with a Game menu.
      </para>
      <para>
      2. Help menu.  This should have at least the following items in this
      order:
        <itemizedlist>
          <listitem>
            <para>
            One item called "Help on GNOME", which should invoke the
	    GNOME Help Browser in its default main page.  This can be
	    done using the gnome_help_xxx() function [FIXME].
            </para>
          </listitem>
          <listitem>
            <para>
	    A separator line.
            </para>
          </listitem>
          <listitem>
            <para>
	    One item called "About &lg;program name>", using the
	    GNOME_STOCK_MENU_ABOUT icon.  This item should create and
	    display an about box using the gnome_about_new() function.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
      [Add stuff about optional edit/view/whatever menus, with descriptions
      of what items should be in each.]
      </para>
      <para>
      It is highly recommended that the application have complete online
      help; this should be considered as G2 level compliancy.  If the
      application provides online help, it should be accessible by a "Help
      on &lg;program name>" menu item at the top of the Help submenu described
      above.  If an application cannot provide full online
      documentation, it is at least suggested that it provide a quick
      overview or description of the program available via the same
      menu item; this should be considered as G1 level compliancy.
      </para>
      <para>
      [FIXME: add description of Help Index, Help Contents, etc. items]
      </para>
    </sect2>
  </sect1>
  <sect1>
    <title>Dialog boxes</title>
    <para></para>
  </sect1>
  <sect1>
    <title>Controls (widgets)</title>
    <para></para>
  </sect1>
  <sect1>
    <title>Icons</title>
    <para></para>
  </sect1>
  <sect1>
    <title>Behaviors</title>
    <para></para>
  </sect1>
  <sect1>
    <title>Language</title>
    <para></para>
  </sect1>
  <sect1>
    <title>Help and documentation</title>
    <para></para>
  </sect1>
</chapter>
<chapter>
  <title>General development information</title>
  <para>
  [This section is meant to provide useful information on tricky UI and
  X programming issues.  Relevant topics include how to write
  flicker-free widgets and widgets that resize correctly, how to make
  themable widgets by using the Gtk themes API, and how to extend the
  existing GNOME widgets.  It also has a checklist of things
  applications should have to conform with the GNOME User Interface
  Guidelines.]
  <para>
  <sect1>
    <title>Checklist</title>
    <para></para>
  </sect1>

</chapter>
<!-- There is a Bibliography tag but I am not sure how to use it -->
<appendix id="references">
<title>References</title>
<orderedlist>
<listitem>
<para>
Apple Computer, Macintosh Human Interface Guidelines.
Addison-Wesley, 1992.  (Also available as
http://developer.apple.com/techpubs/mac/HIGuidelines/HIGuidelines-2.html).
</para>
<listitem>
<para>
GNU Network Object Model Environment, http://www.gnome.org
</para>
<listitem>
<para>
The GNOME Manifesto, http://www.gnome.org/about/manifesto.shtml
</para>
<listitem>
<para>
Interface Hall of Fame, http://www.iarchitect.com/mfame.htm
</para>
<listitem>
<para>
Interface Hall of Shame, http://www.iarchitect.com/mshame.htm
</para>
<listitem>
<para>
Tom Vogt, Rogue GNOME Style Guide, http://home.onestop.net/arena/rsg.txt
</para>
</orderedlist>
</appendix>
</book>
